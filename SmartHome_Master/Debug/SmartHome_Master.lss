
SmartHome_Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001fd8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000054  00800060  00001fd8  0000206c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  008000b4  008000b4  000020c0  2**0
                  ALLOC
  3 .stab         00002094  00000000  00000000  000020c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d93  00000000  00000000  00004154  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00004ee7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005027  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005197  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006de0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007ccb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008a78  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00008e65  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009633  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ed       	ldi	r30, 0xD8	; 216
      68:	ff e1       	ldi	r31, 0x1F	; 31
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3b       	cpi	r26, 0xB4	; 180
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 eb       	ldi	r26, 0xB4	; 180
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3b       	cpi	r26, 0xB6	; 182
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <main>
      8a:	0c 94 ea 0f 	jmp	0x1fd4	; 0x1fd4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b3 0f 	jmp	0x1f66	; 0x1f66 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa e9       	ldi	r26, 0x9A	; 154
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 cf 0f 	jmp	0x1f9e	; 0x1f9e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 db 0f 	jmp	0x1fb6	; 0x1fb6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 db 0f 	jmp	0x1fb6	; 0x1fb6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b3 0f 	jmp	0x1f66	; 0x1f66 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a e9       	ldi	r24, 0x9A	; 154
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 cf 0f 	jmp	0x1f9e	; 0x1f9e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 db 0f 	jmp	0x1fb6	; 0x1fb6 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 db 0f 	jmp	0x1fb6	; 0x1fb6 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 db 0f 	jmp	0x1fb6	; 0x1fb6 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 c3 0f 	jmp	0x1f86	; 0x1f86 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 df 0f 	jmp	0x1fbe	; 0x1fbe <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <KEYPAD_GetPressedKey>:
								{' ','0','=','+'}};
unsigned char colloc, rowloc;


char KEYPAD_GetPressedKey()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	a1 97       	sbiw	r28, 0x21	; 33
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61

    KEY_DDR = 0xF0;
     b5a:	ea e3       	ldi	r30, 0x3A	; 58
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	80 ef       	ldi	r24, 0xF0	; 240
     b60:	80 83       	st	Z, r24
    KEY_PRT = 0xFF;
     b62:	eb e3       	ldi	r30, 0x3B	; 59
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	8f ef       	ldi	r24, 0xFF	; 255
     b68:	80 83       	st	Z, r24

	while(1)
	{

	    do{
			KEY_PRT &= 0x0F;      		/* mask PORT for column read only */
     b6a:	ab e3       	ldi	r26, 0x3B	; 59
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	eb e3       	ldi	r30, 0x3B	; 59
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	8f 70       	andi	r24, 0x0F	; 15
     b76:	8c 93       	st	X, r24
			asm("NOP");
     b78:	00 00       	nop
			colloc = (KEY_PIN & 0x0F); 	/* read status of column */
     b7a:	e9 e3       	ldi	r30, 0x39	; 57
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	80 81       	ld	r24, Z
     b80:	8f 70       	andi	r24, 0x0F	; 15
     b82:	80 93 b4 00 	sts	0x00B4, r24
	    }while(colloc != 0x0F);
     b86:	80 91 b4 00 	lds	r24, 0x00B4
     b8a:	8f 30       	cpi	r24, 0x0F	; 15
     b8c:	71 f7       	brne	.-36     	; 0xb6a <KEYPAD_GetPressedKey+0x24>
     b8e:	80 e0       	ldi	r24, 0x00	; 0
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	a0 ea       	ldi	r26, 0xA0	; 160
     b94:	b1 e4       	ldi	r27, 0x41	; 65
     b96:	89 8f       	std	Y+25, r24	; 0x19
     b98:	9a 8f       	std	Y+26, r25	; 0x1a
     b9a:	ab 8f       	std	Y+27, r26	; 0x1b
     b9c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b9e:	69 8d       	ldd	r22, Y+25	; 0x19
     ba0:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ba2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ba4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ba6:	20 e0       	ldi	r18, 0x00	; 0
     ba8:	30 e0       	ldi	r19, 0x00	; 0
     baa:	4a e7       	ldi	r20, 0x7A	; 122
     bac:	53 e4       	ldi	r21, 0x43	; 67
     bae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bb2:	dc 01       	movw	r26, r24
     bb4:	cb 01       	movw	r24, r22
     bb6:	8d 8b       	std	Y+21, r24	; 0x15
     bb8:	9e 8b       	std	Y+22, r25	; 0x16
     bba:	af 8b       	std	Y+23, r26	; 0x17
     bbc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     bbe:	6d 89       	ldd	r22, Y+21	; 0x15
     bc0:	7e 89       	ldd	r23, Y+22	; 0x16
     bc2:	8f 89       	ldd	r24, Y+23	; 0x17
     bc4:	98 8d       	ldd	r25, Y+24	; 0x18
     bc6:	20 e0       	ldi	r18, 0x00	; 0
     bc8:	30 e0       	ldi	r19, 0x00	; 0
     bca:	40 e8       	ldi	r20, 0x80	; 128
     bcc:	5f e3       	ldi	r21, 0x3F	; 63
     bce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bd2:	88 23       	and	r24, r24
     bd4:	2c f4       	brge	.+10     	; 0xbe0 <KEYPAD_GetPressedKey+0x9a>
		__ticks = 1;
     bd6:	81 e0       	ldi	r24, 0x01	; 1
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	9c 8b       	std	Y+20, r25	; 0x14
     bdc:	8b 8b       	std	Y+19, r24	; 0x13
     bde:	3f c0       	rjmp	.+126    	; 0xc5e <KEYPAD_GetPressedKey+0x118>
	else if (__tmp > 65535)
     be0:	6d 89       	ldd	r22, Y+21	; 0x15
     be2:	7e 89       	ldd	r23, Y+22	; 0x16
     be4:	8f 89       	ldd	r24, Y+23	; 0x17
     be6:	98 8d       	ldd	r25, Y+24	; 0x18
     be8:	20 e0       	ldi	r18, 0x00	; 0
     bea:	3f ef       	ldi	r19, 0xFF	; 255
     bec:	4f e7       	ldi	r20, 0x7F	; 127
     bee:	57 e4       	ldi	r21, 0x47	; 71
     bf0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     bf4:	18 16       	cp	r1, r24
     bf6:	4c f5       	brge	.+82     	; 0xc4a <KEYPAD_GetPressedKey+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bf8:	69 8d       	ldd	r22, Y+25	; 0x19
     bfa:	7a 8d       	ldd	r23, Y+26	; 0x1a
     bfc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     bfe:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c00:	20 e0       	ldi	r18, 0x00	; 0
     c02:	30 e0       	ldi	r19, 0x00	; 0
     c04:	40 e2       	ldi	r20, 0x20	; 32
     c06:	51 e4       	ldi	r21, 0x41	; 65
     c08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c0c:	dc 01       	movw	r26, r24
     c0e:	cb 01       	movw	r24, r22
     c10:	bc 01       	movw	r22, r24
     c12:	cd 01       	movw	r24, r26
     c14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c18:	dc 01       	movw	r26, r24
     c1a:	cb 01       	movw	r24, r22
     c1c:	9c 8b       	std	Y+20, r25	; 0x14
     c1e:	8b 8b       	std	Y+19, r24	; 0x13
     c20:	0f c0       	rjmp	.+30     	; 0xc40 <KEYPAD_GetPressedKey+0xfa>
     c22:	89 e1       	ldi	r24, 0x19	; 25
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	9a 8b       	std	Y+18, r25	; 0x12
     c28:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c2a:	89 89       	ldd	r24, Y+17	; 0x11
     c2c:	9a 89       	ldd	r25, Y+18	; 0x12
     c2e:	01 97       	sbiw	r24, 0x01	; 1
     c30:	f1 f7       	brne	.-4      	; 0xc2e <KEYPAD_GetPressedKey+0xe8>
     c32:	9a 8b       	std	Y+18, r25	; 0x12
     c34:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c36:	8b 89       	ldd	r24, Y+19	; 0x13
     c38:	9c 89       	ldd	r25, Y+20	; 0x14
     c3a:	01 97       	sbiw	r24, 0x01	; 1
     c3c:	9c 8b       	std	Y+20, r25	; 0x14
     c3e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c40:	8b 89       	ldd	r24, Y+19	; 0x13
     c42:	9c 89       	ldd	r25, Y+20	; 0x14
     c44:	00 97       	sbiw	r24, 0x00	; 0
     c46:	69 f7       	brne	.-38     	; 0xc22 <KEYPAD_GetPressedKey+0xdc>
     c48:	14 c0       	rjmp	.+40     	; 0xc72 <KEYPAD_GetPressedKey+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c4a:	6d 89       	ldd	r22, Y+21	; 0x15
     c4c:	7e 89       	ldd	r23, Y+22	; 0x16
     c4e:	8f 89       	ldd	r24, Y+23	; 0x17
     c50:	98 8d       	ldd	r25, Y+24	; 0x18
     c52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c56:	dc 01       	movw	r26, r24
     c58:	cb 01       	movw	r24, r22
     c5a:	9c 8b       	std	Y+20, r25	; 0x14
     c5c:	8b 8b       	std	Y+19, r24	; 0x13
     c5e:	8b 89       	ldd	r24, Y+19	; 0x13
     c60:	9c 89       	ldd	r25, Y+20	; 0x14
     c62:	98 8b       	std	Y+16, r25	; 0x10
     c64:	8f 87       	std	Y+15, r24	; 0x0f
     c66:	8f 85       	ldd	r24, Y+15	; 0x0f
     c68:	98 89       	ldd	r25, Y+16	; 0x10
     c6a:	01 97       	sbiw	r24, 0x01	; 1
     c6c:	f1 f7       	brne	.-4      	; 0xc6a <KEYPAD_GetPressedKey+0x124>
     c6e:	98 8b       	std	Y+16, r25	; 0x10
     c70:	8f 87       	std	Y+15, r24	; 0x0f

	    do{
			do{
				_delay_ms(20);             /* 20ms key debounce time */
				colloc = (KEY_PIN & 0x0F); /* read status of column */
     c72:	e9 e3       	ldi	r30, 0x39	; 57
     c74:	f0 e0       	ldi	r31, 0x00	; 0
     c76:	80 81       	ld	r24, Z
     c78:	8f 70       	andi	r24, 0x0F	; 15
     c7a:	80 93 b4 00 	sts	0x00B4, r24
			}while(colloc == 0x0F);        /* check for any key press */
     c7e:	80 91 b4 00 	lds	r24, 0x00B4
     c82:	8f 30       	cpi	r24, 0x0F	; 15
     c84:	09 f4       	brne	.+2      	; 0xc88 <KEYPAD_GetPressedKey+0x142>
     c86:	83 cf       	rjmp	.-250    	; 0xb8e <KEYPAD_GetPressedKey+0x48>
     c88:	80 e0       	ldi	r24, 0x00	; 0
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	a0 e2       	ldi	r26, 0x20	; 32
     c8e:	b2 e4       	ldi	r27, 0x42	; 66
     c90:	8b 87       	std	Y+11, r24	; 0x0b
     c92:	9c 87       	std	Y+12, r25	; 0x0c
     c94:	ad 87       	std	Y+13, r26	; 0x0d
     c96:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c98:	6b 85       	ldd	r22, Y+11	; 0x0b
     c9a:	7c 85       	ldd	r23, Y+12	; 0x0c
     c9c:	8d 85       	ldd	r24, Y+13	; 0x0d
     c9e:	9e 85       	ldd	r25, Y+14	; 0x0e
     ca0:	20 e0       	ldi	r18, 0x00	; 0
     ca2:	30 e0       	ldi	r19, 0x00	; 0
     ca4:	4a e7       	ldi	r20, 0x7A	; 122
     ca6:	53 e4       	ldi	r21, 0x43	; 67
     ca8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cac:	dc 01       	movw	r26, r24
     cae:	cb 01       	movw	r24, r22
     cb0:	8f 83       	std	Y+7, r24	; 0x07
     cb2:	98 87       	std	Y+8, r25	; 0x08
     cb4:	a9 87       	std	Y+9, r26	; 0x09
     cb6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cb8:	6f 81       	ldd	r22, Y+7	; 0x07
     cba:	78 85       	ldd	r23, Y+8	; 0x08
     cbc:	89 85       	ldd	r24, Y+9	; 0x09
     cbe:	9a 85       	ldd	r25, Y+10	; 0x0a
     cc0:	20 e0       	ldi	r18, 0x00	; 0
     cc2:	30 e0       	ldi	r19, 0x00	; 0
     cc4:	40 e8       	ldi	r20, 0x80	; 128
     cc6:	5f e3       	ldi	r21, 0x3F	; 63
     cc8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ccc:	88 23       	and	r24, r24
     cce:	2c f4       	brge	.+10     	; 0xcda <KEYPAD_GetPressedKey+0x194>
		__ticks = 1;
     cd0:	81 e0       	ldi	r24, 0x01	; 1
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	9e 83       	std	Y+6, r25	; 0x06
     cd6:	8d 83       	std	Y+5, r24	; 0x05
     cd8:	3f c0       	rjmp	.+126    	; 0xd58 <KEYPAD_GetPressedKey+0x212>
	else if (__tmp > 65535)
     cda:	6f 81       	ldd	r22, Y+7	; 0x07
     cdc:	78 85       	ldd	r23, Y+8	; 0x08
     cde:	89 85       	ldd	r24, Y+9	; 0x09
     ce0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ce2:	20 e0       	ldi	r18, 0x00	; 0
     ce4:	3f ef       	ldi	r19, 0xFF	; 255
     ce6:	4f e7       	ldi	r20, 0x7F	; 127
     ce8:	57 e4       	ldi	r21, 0x47	; 71
     cea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     cee:	18 16       	cp	r1, r24
     cf0:	4c f5       	brge	.+82     	; 0xd44 <KEYPAD_GetPressedKey+0x1fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cf2:	6b 85       	ldd	r22, Y+11	; 0x0b
     cf4:	7c 85       	ldd	r23, Y+12	; 0x0c
     cf6:	8d 85       	ldd	r24, Y+13	; 0x0d
     cf8:	9e 85       	ldd	r25, Y+14	; 0x0e
     cfa:	20 e0       	ldi	r18, 0x00	; 0
     cfc:	30 e0       	ldi	r19, 0x00	; 0
     cfe:	40 e2       	ldi	r20, 0x20	; 32
     d00:	51 e4       	ldi	r21, 0x41	; 65
     d02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d06:	dc 01       	movw	r26, r24
     d08:	cb 01       	movw	r24, r22
     d0a:	bc 01       	movw	r22, r24
     d0c:	cd 01       	movw	r24, r26
     d0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d12:	dc 01       	movw	r26, r24
     d14:	cb 01       	movw	r24, r22
     d16:	9e 83       	std	Y+6, r25	; 0x06
     d18:	8d 83       	std	Y+5, r24	; 0x05
     d1a:	0f c0       	rjmp	.+30     	; 0xd3a <KEYPAD_GetPressedKey+0x1f4>
     d1c:	89 e1       	ldi	r24, 0x19	; 25
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	9c 83       	std	Y+4, r25	; 0x04
     d22:	8b 83       	std	Y+3, r24	; 0x03
     d24:	8b 81       	ldd	r24, Y+3	; 0x03
     d26:	9c 81       	ldd	r25, Y+4	; 0x04
     d28:	01 97       	sbiw	r24, 0x01	; 1
     d2a:	f1 f7       	brne	.-4      	; 0xd28 <KEYPAD_GetPressedKey+0x1e2>
     d2c:	9c 83       	std	Y+4, r25	; 0x04
     d2e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d30:	8d 81       	ldd	r24, Y+5	; 0x05
     d32:	9e 81       	ldd	r25, Y+6	; 0x06
     d34:	01 97       	sbiw	r24, 0x01	; 1
     d36:	9e 83       	std	Y+6, r25	; 0x06
     d38:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d3a:	8d 81       	ldd	r24, Y+5	; 0x05
     d3c:	9e 81       	ldd	r25, Y+6	; 0x06
     d3e:	00 97       	sbiw	r24, 0x00	; 0
     d40:	69 f7       	brne	.-38     	; 0xd1c <KEYPAD_GetPressedKey+0x1d6>
     d42:	14 c0       	rjmp	.+40     	; 0xd6c <KEYPAD_GetPressedKey+0x226>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d44:	6f 81       	ldd	r22, Y+7	; 0x07
     d46:	78 85       	ldd	r23, Y+8	; 0x08
     d48:	89 85       	ldd	r24, Y+9	; 0x09
     d4a:	9a 85       	ldd	r25, Y+10	; 0x0a
     d4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d50:	dc 01       	movw	r26, r24
     d52:	cb 01       	movw	r24, r22
     d54:	9e 83       	std	Y+6, r25	; 0x06
     d56:	8d 83       	std	Y+5, r24	; 0x05
     d58:	8d 81       	ldd	r24, Y+5	; 0x05
     d5a:	9e 81       	ldd	r25, Y+6	; 0x06
     d5c:	9a 83       	std	Y+2, r25	; 0x02
     d5e:	89 83       	std	Y+1, r24	; 0x01
     d60:	89 81       	ldd	r24, Y+1	; 0x01
     d62:	9a 81       	ldd	r25, Y+2	; 0x02
     d64:	01 97       	sbiw	r24, 0x01	; 1
     d66:	f1 f7       	brne	.-4      	; 0xd64 <KEYPAD_GetPressedKey+0x21e>
     d68:	9a 83       	std	Y+2, r25	; 0x02
     d6a:	89 83       	std	Y+1, r24	; 0x01

			_delay_ms (40);	            /* 20 ms key debounce time */
			colloc = (KEY_PIN & 0x0F);
     d6c:	e9 e3       	ldi	r30, 0x39	; 57
     d6e:	f0 e0       	ldi	r31, 0x00	; 0
     d70:	80 81       	ld	r24, Z
     d72:	8f 70       	andi	r24, 0x0F	; 15
     d74:	80 93 b4 00 	sts	0x00B4, r24
	    }while(colloc == 0x0F);
     d78:	80 91 b4 00 	lds	r24, 0x00B4
     d7c:	8f 30       	cpi	r24, 0x0F	; 15
     d7e:	09 f4       	brne	.+2      	; 0xd82 <KEYPAD_GetPressedKey+0x23c>
     d80:	06 cf       	rjmp	.-500    	; 0xb8e <KEYPAD_GetPressedKey+0x48>

	   /* now check for rows */
	    KEY_PRT = 0xEF;            /* check for pressed key in 1st row */
     d82:	eb e3       	ldi	r30, 0x3B	; 59
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	8f ee       	ldi	r24, 0xEF	; 239
     d88:	80 83       	st	Z, r24
	    asm("NOP");
     d8a:	00 00       	nop
	    colloc = (KEY_PIN & 0x0F);
     d8c:	e9 e3       	ldi	r30, 0x39	; 57
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	80 81       	ld	r24, Z
     d92:	8f 70       	andi	r24, 0x0F	; 15
     d94:	80 93 b4 00 	sts	0x00B4, r24
	    if(colloc != 0x0F)
     d98:	80 91 b4 00 	lds	r24, 0x00B4
     d9c:	8f 30       	cpi	r24, 0x0F	; 15
     d9e:	19 f0       	breq	.+6      	; 0xda6 <KEYPAD_GetPressedKey+0x260>
            {
		rowloc = 0;
     da0:	10 92 b5 00 	sts	0x00B5, r1
     da4:	39 c0       	rjmp	.+114    	; 0xe18 <KEYPAD_GetPressedKey+0x2d2>
		break;
	    }

	    KEY_PRT = 0xDF;		/* check for pressed key in 2nd row */
     da6:	eb e3       	ldi	r30, 0x3B	; 59
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	8f ed       	ldi	r24, 0xDF	; 223
     dac:	80 83       	st	Z, r24
	    asm("NOP");
     dae:	00 00       	nop
	    colloc = (KEY_PIN & 0x0F);
     db0:	e9 e3       	ldi	r30, 0x39	; 57
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	80 81       	ld	r24, Z
     db6:	8f 70       	andi	r24, 0x0F	; 15
     db8:	80 93 b4 00 	sts	0x00B4, r24
	    if(colloc != 0x0F)
     dbc:	80 91 b4 00 	lds	r24, 0x00B4
     dc0:	8f 30       	cpi	r24, 0x0F	; 15
     dc2:	21 f0       	breq	.+8      	; 0xdcc <KEYPAD_GetPressedKey+0x286>
	    {
		rowloc = 1;
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	80 93 b5 00 	sts	0x00B5, r24
     dca:	26 c0       	rjmp	.+76     	; 0xe18 <KEYPAD_GetPressedKey+0x2d2>
		break;
	    }

	    KEY_PRT = 0xBF;		/* check for pressed key in 3rd row */
     dcc:	eb e3       	ldi	r30, 0x3B	; 59
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	8f eb       	ldi	r24, 0xBF	; 191
     dd2:	80 83       	st	Z, r24
	    asm("NOP");
     dd4:	00 00       	nop
            colloc = (KEY_PIN & 0x0F);
     dd6:	e9 e3       	ldi	r30, 0x39	; 57
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	80 81       	ld	r24, Z
     ddc:	8f 70       	andi	r24, 0x0F	; 15
     dde:	80 93 b4 00 	sts	0x00B4, r24
	    if(colloc != 0x0F)
     de2:	80 91 b4 00 	lds	r24, 0x00B4
     de6:	8f 30       	cpi	r24, 0x0F	; 15
     de8:	21 f0       	breq	.+8      	; 0xdf2 <KEYPAD_GetPressedKey+0x2ac>
	    {
		rowloc = 2;
     dea:	82 e0       	ldi	r24, 0x02	; 2
     dec:	80 93 b5 00 	sts	0x00B5, r24
     df0:	13 c0       	rjmp	.+38     	; 0xe18 <KEYPAD_GetPressedKey+0x2d2>
		break;
	    }

	    KEY_PRT = 0x7F;		/* check for pressed key in 4th row */
     df2:	eb e3       	ldi	r30, 0x3B	; 59
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	8f e7       	ldi	r24, 0x7F	; 127
     df8:	80 83       	st	Z, r24
	    asm("NOP");
     dfa:	00 00       	nop
	    colloc = (KEY_PIN & 0x0F);
     dfc:	e9 e3       	ldi	r30, 0x39	; 57
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	80 81       	ld	r24, Z
     e02:	8f 70       	andi	r24, 0x0F	; 15
     e04:	80 93 b4 00 	sts	0x00B4, r24
	    if(colloc != 0x0F)
     e08:	80 91 b4 00 	lds	r24, 0x00B4
     e0c:	8f 30       	cpi	r24, 0x0F	; 15
     e0e:	09 f4       	brne	.+2      	; 0xe12 <KEYPAD_GetPressedKey+0x2cc>
     e10:	ac ce       	rjmp	.-680    	; 0xb6a <KEYPAD_GetPressedKey+0x24>
	    {
		rowloc = 3;
     e12:	83 e0       	ldi	r24, 0x03	; 3
     e14:	80 93 b5 00 	sts	0x00B5, r24
		break;
	    }
	}

	if(colloc == 0x0E)
     e18:	80 91 b4 00 	lds	r24, 0x00B4
     e1c:	8e 30       	cpi	r24, 0x0E	; 14
     e1e:	71 f4       	brne	.+28     	; 0xe3c <KEYPAD_GetPressedKey+0x2f6>
	   return(keypad[rowloc][0]);
     e20:	80 91 b5 00 	lds	r24, 0x00B5
     e24:	88 2f       	mov	r24, r24
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	88 0f       	add	r24, r24
     e2a:	99 1f       	adc	r25, r25
     e2c:	88 0f       	add	r24, r24
     e2e:	99 1f       	adc	r25, r25
     e30:	fc 01       	movw	r30, r24
     e32:	ee 55       	subi	r30, 0x5E	; 94
     e34:	ff 4f       	sbci	r31, 0xFF	; 255
     e36:	80 81       	ld	r24, Z
     e38:	89 a3       	std	Y+33, r24	; 0x21
     e3a:	32 c0       	rjmp	.+100    	; 0xea0 <KEYPAD_GetPressedKey+0x35a>
	else if(colloc == 0x0D)
     e3c:	80 91 b4 00 	lds	r24, 0x00B4
     e40:	8d 30       	cpi	r24, 0x0D	; 13
     e42:	71 f4       	brne	.+28     	; 0xe60 <KEYPAD_GetPressedKey+0x31a>
	   return(keypad[rowloc][1]);
     e44:	80 91 b5 00 	lds	r24, 0x00B5
     e48:	88 2f       	mov	r24, r24
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	88 0f       	add	r24, r24
     e4e:	99 1f       	adc	r25, r25
     e50:	88 0f       	add	r24, r24
     e52:	99 1f       	adc	r25, r25
     e54:	fc 01       	movw	r30, r24
     e56:	ed 55       	subi	r30, 0x5D	; 93
     e58:	ff 4f       	sbci	r31, 0xFF	; 255
     e5a:	80 81       	ld	r24, Z
     e5c:	89 a3       	std	Y+33, r24	; 0x21
     e5e:	20 c0       	rjmp	.+64     	; 0xea0 <KEYPAD_GetPressedKey+0x35a>
	else if(colloc == 0x0B)
     e60:	80 91 b4 00 	lds	r24, 0x00B4
     e64:	8b 30       	cpi	r24, 0x0B	; 11
     e66:	79 f4       	brne	.+30     	; 0xe86 <KEYPAD_GetPressedKey+0x340>
	   return(keypad[rowloc][2]);
     e68:	80 91 b5 00 	lds	r24, 0x00B5
     e6c:	88 2f       	mov	r24, r24
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	88 0f       	add	r24, r24
     e72:	99 1f       	adc	r25, r25
     e74:	01 96       	adiw	r24, 0x01	; 1
     e76:	88 0f       	add	r24, r24
     e78:	99 1f       	adc	r25, r25
     e7a:	fc 01       	movw	r30, r24
     e7c:	ee 55       	subi	r30, 0x5E	; 94
     e7e:	ff 4f       	sbci	r31, 0xFF	; 255
     e80:	80 81       	ld	r24, Z
     e82:	89 a3       	std	Y+33, r24	; 0x21
     e84:	0d c0       	rjmp	.+26     	; 0xea0 <KEYPAD_GetPressedKey+0x35a>
	else
	   return(keypad[rowloc][3]);
     e86:	80 91 b5 00 	lds	r24, 0x00B5
     e8a:	88 2f       	mov	r24, r24
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	88 0f       	add	r24, r24
     e90:	99 1f       	adc	r25, r25
     e92:	88 0f       	add	r24, r24
     e94:	99 1f       	adc	r25, r25
     e96:	fc 01       	movw	r30, r24
     e98:	eb 55       	subi	r30, 0x5B	; 91
     e9a:	ff 4f       	sbci	r31, 0xFF	; 255
     e9c:	80 81       	ld	r24, Z
     e9e:	89 a3       	std	Y+33, r24	; 0x21
     ea0:	89 a1       	ldd	r24, Y+33	; 0x21


}
     ea2:	a1 96       	adiw	r28, 0x21	; 33
     ea4:	0f b6       	in	r0, 0x3f	; 63
     ea6:	f8 94       	cli
     ea8:	de bf       	out	0x3e, r29	; 62
     eaa:	0f be       	out	0x3f, r0	; 63
     eac:	cd bf       	out	0x3d, r28	; 61
     eae:	cf 91       	pop	r28
     eb0:	df 91       	pop	r29
     eb2:	08 95       	ret

00000eb4 <LCD_init>:
#define SetBit(PortName,PinNumber)  PortName|=(1<<PinNumber)
#define ClearBit(PortName,PinNumber) PortName&=~(1<<PinNumber)
#define ToggleBit(PortName,PinNumber) PortName^=(1<<PinNumber)
#define GetBit(PortName,PinNumber) (PortName&(1<<PinNumber))

void LCD_init(void){
     eb4:	df 93       	push	r29
     eb6:	cf 93       	push	r28
     eb8:	cd b7       	in	r28, 0x3d	; 61
     eba:	de b7       	in	r29, 0x3e	; 62
	SetBit(DDRC,5);
     ebc:	a4 e3       	ldi	r26, 0x34	; 52
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	e4 e3       	ldi	r30, 0x34	; 52
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	80 62       	ori	r24, 0x20	; 32
     ec8:	8c 93       	st	X, r24
	SetBit(DDRC,6);
     eca:	a4 e3       	ldi	r26, 0x34	; 52
     ecc:	b0 e0       	ldi	r27, 0x00	; 0
     ece:	e4 e3       	ldi	r30, 0x34	; 52
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	80 81       	ld	r24, Z
     ed4:	80 64       	ori	r24, 0x40	; 64
     ed6:	8c 93       	st	X, r24
	SetBit(DDRC,7);
     ed8:	a4 e3       	ldi	r26, 0x34	; 52
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	e4 e3       	ldi	r30, 0x34	; 52
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	80 68       	ori	r24, 0x80	; 128
     ee4:	8c 93       	st	X, r24
	DDRD=0xFF;
     ee6:	e1 e3       	ldi	r30, 0x31	; 49
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	8f ef       	ldi	r24, 0xFF	; 255
     eec:	80 83       	st	Z, r24
	LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE);
     eee:	88 e3       	ldi	r24, 0x38	; 56
     ef0:	0e 94 83 07 	call	0xf06	; 0xf06 <LCD_sendCommand>
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
     ef4:	8c e0       	ldi	r24, 0x0C	; 12
     ef6:	0e 94 83 07 	call	0xf06	; 0xf06 <LCD_sendCommand>
		LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	0e 94 83 07 	call	0xf06	; 0xf06 <LCD_sendCommand>
}
     f00:	cf 91       	pop	r28
     f02:	df 91       	pop	r29
     f04:	08 95       	ret

00000f06 <LCD_sendCommand>:
void LCD_sendCommand(char command){
     f06:	df 93       	push	r29
     f08:	cf 93       	push	r28
     f0a:	cd b7       	in	r28, 0x3d	; 61
     f0c:	de b7       	in	r29, 0x3e	; 62
     f0e:	ab 97       	sbiw	r28, 0x2b	; 43
     f10:	0f b6       	in	r0, 0x3f	; 63
     f12:	f8 94       	cli
     f14:	de bf       	out	0x3e, r29	; 62
     f16:	0f be       	out	0x3f, r0	; 63
     f18:	cd bf       	out	0x3d, r28	; 61
     f1a:	8b a7       	std	Y+43, r24	; 0x2b
	ClearBit(PORTC,5);
     f1c:	a5 e3       	ldi	r26, 0x35	; 53
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	e5 e3       	ldi	r30, 0x35	; 53
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	8f 7d       	andi	r24, 0xDF	; 223
     f28:	8c 93       	st	X, r24
	ClearBit(PORTC,6);
     f2a:	a5 e3       	ldi	r26, 0x35	; 53
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	e5 e3       	ldi	r30, 0x35	; 53
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	8f 7b       	andi	r24, 0xBF	; 191
     f36:	8c 93       	st	X, r24
	SetBit(PORTC,7);
     f38:	a5 e3       	ldi	r26, 0x35	; 53
     f3a:	b0 e0       	ldi	r27, 0x00	; 0
     f3c:	e5 e3       	ldi	r30, 0x35	; 53
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	80 81       	ld	r24, Z
     f42:	80 68       	ori	r24, 0x80	; 128
     f44:	8c 93       	st	X, r24
     f46:	80 e0       	ldi	r24, 0x00	; 0
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	a0 e8       	ldi	r26, 0x80	; 128
     f4c:	bf e3       	ldi	r27, 0x3F	; 63
     f4e:	8f a3       	std	Y+39, r24	; 0x27
     f50:	98 a7       	std	Y+40, r25	; 0x28
     f52:	a9 a7       	std	Y+41, r26	; 0x29
     f54:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f56:	6f a1       	ldd	r22, Y+39	; 0x27
     f58:	78 a5       	ldd	r23, Y+40	; 0x28
     f5a:	89 a5       	ldd	r24, Y+41	; 0x29
     f5c:	9a a5       	ldd	r25, Y+42	; 0x2a
     f5e:	20 e0       	ldi	r18, 0x00	; 0
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	4a e7       	ldi	r20, 0x7A	; 122
     f64:	53 e4       	ldi	r21, 0x43	; 67
     f66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f6a:	dc 01       	movw	r26, r24
     f6c:	cb 01       	movw	r24, r22
     f6e:	8b a3       	std	Y+35, r24	; 0x23
     f70:	9c a3       	std	Y+36, r25	; 0x24
     f72:	ad a3       	std	Y+37, r26	; 0x25
     f74:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     f76:	6b a1       	ldd	r22, Y+35	; 0x23
     f78:	7c a1       	ldd	r23, Y+36	; 0x24
     f7a:	8d a1       	ldd	r24, Y+37	; 0x25
     f7c:	9e a1       	ldd	r25, Y+38	; 0x26
     f7e:	20 e0       	ldi	r18, 0x00	; 0
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	40 e8       	ldi	r20, 0x80	; 128
     f84:	5f e3       	ldi	r21, 0x3F	; 63
     f86:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f8a:	88 23       	and	r24, r24
     f8c:	2c f4       	brge	.+10     	; 0xf98 <LCD_sendCommand+0x92>
		__ticks = 1;
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	9a a3       	std	Y+34, r25	; 0x22
     f94:	89 a3       	std	Y+33, r24	; 0x21
     f96:	3f c0       	rjmp	.+126    	; 0x1016 <LCD_sendCommand+0x110>
	else if (__tmp > 65535)
     f98:	6b a1       	ldd	r22, Y+35	; 0x23
     f9a:	7c a1       	ldd	r23, Y+36	; 0x24
     f9c:	8d a1       	ldd	r24, Y+37	; 0x25
     f9e:	9e a1       	ldd	r25, Y+38	; 0x26
     fa0:	20 e0       	ldi	r18, 0x00	; 0
     fa2:	3f ef       	ldi	r19, 0xFF	; 255
     fa4:	4f e7       	ldi	r20, 0x7F	; 127
     fa6:	57 e4       	ldi	r21, 0x47	; 71
     fa8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fac:	18 16       	cp	r1, r24
     fae:	4c f5       	brge	.+82     	; 0x1002 <LCD_sendCommand+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fb0:	6f a1       	ldd	r22, Y+39	; 0x27
     fb2:	78 a5       	ldd	r23, Y+40	; 0x28
     fb4:	89 a5       	ldd	r24, Y+41	; 0x29
     fb6:	9a a5       	ldd	r25, Y+42	; 0x2a
     fb8:	20 e0       	ldi	r18, 0x00	; 0
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	40 e2       	ldi	r20, 0x20	; 32
     fbe:	51 e4       	ldi	r21, 0x41	; 65
     fc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fc4:	dc 01       	movw	r26, r24
     fc6:	cb 01       	movw	r24, r22
     fc8:	bc 01       	movw	r22, r24
     fca:	cd 01       	movw	r24, r26
     fcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fd0:	dc 01       	movw	r26, r24
     fd2:	cb 01       	movw	r24, r22
     fd4:	9a a3       	std	Y+34, r25	; 0x22
     fd6:	89 a3       	std	Y+33, r24	; 0x21
     fd8:	0f c0       	rjmp	.+30     	; 0xff8 <LCD_sendCommand+0xf2>
     fda:	89 e1       	ldi	r24, 0x19	; 25
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	98 a3       	std	Y+32, r25	; 0x20
     fe0:	8f 8f       	std	Y+31, r24	; 0x1f
     fe2:	8f 8d       	ldd	r24, Y+31	; 0x1f
     fe4:	98 a1       	ldd	r25, Y+32	; 0x20
     fe6:	01 97       	sbiw	r24, 0x01	; 1
     fe8:	f1 f7       	brne	.-4      	; 0xfe6 <LCD_sendCommand+0xe0>
     fea:	98 a3       	std	Y+32, r25	; 0x20
     fec:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fee:	89 a1       	ldd	r24, Y+33	; 0x21
     ff0:	9a a1       	ldd	r25, Y+34	; 0x22
     ff2:	01 97       	sbiw	r24, 0x01	; 1
     ff4:	9a a3       	std	Y+34, r25	; 0x22
     ff6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ff8:	89 a1       	ldd	r24, Y+33	; 0x21
     ffa:	9a a1       	ldd	r25, Y+34	; 0x22
     ffc:	00 97       	sbiw	r24, 0x00	; 0
     ffe:	69 f7       	brne	.-38     	; 0xfda <LCD_sendCommand+0xd4>
    1000:	14 c0       	rjmp	.+40     	; 0x102a <LCD_sendCommand+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1002:	6b a1       	ldd	r22, Y+35	; 0x23
    1004:	7c a1       	ldd	r23, Y+36	; 0x24
    1006:	8d a1       	ldd	r24, Y+37	; 0x25
    1008:	9e a1       	ldd	r25, Y+38	; 0x26
    100a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    100e:	dc 01       	movw	r26, r24
    1010:	cb 01       	movw	r24, r22
    1012:	9a a3       	std	Y+34, r25	; 0x22
    1014:	89 a3       	std	Y+33, r24	; 0x21
    1016:	89 a1       	ldd	r24, Y+33	; 0x21
    1018:	9a a1       	ldd	r25, Y+34	; 0x22
    101a:	9e 8f       	std	Y+30, r25	; 0x1e
    101c:	8d 8f       	std	Y+29, r24	; 0x1d
    101e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1020:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1022:	01 97       	sbiw	r24, 0x01	; 1
    1024:	f1 f7       	brne	.-4      	; 0x1022 <LCD_sendCommand+0x11c>
    1026:	9e 8f       	std	Y+30, r25	; 0x1e
    1028:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	PORTD=command;
    102a:	e2 e3       	ldi	r30, 0x32	; 50
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1030:	80 83       	st	Z, r24
    1032:	80 e0       	ldi	r24, 0x00	; 0
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	a0 e8       	ldi	r26, 0x80	; 128
    1038:	bf e3       	ldi	r27, 0x3F	; 63
    103a:	89 8f       	std	Y+25, r24	; 0x19
    103c:	9a 8f       	std	Y+26, r25	; 0x1a
    103e:	ab 8f       	std	Y+27, r26	; 0x1b
    1040:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1042:	69 8d       	ldd	r22, Y+25	; 0x19
    1044:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1046:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1048:	9c 8d       	ldd	r25, Y+28	; 0x1c
    104a:	20 e0       	ldi	r18, 0x00	; 0
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	4a e7       	ldi	r20, 0x7A	; 122
    1050:	53 e4       	ldi	r21, 0x43	; 67
    1052:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1056:	dc 01       	movw	r26, r24
    1058:	cb 01       	movw	r24, r22
    105a:	8d 8b       	std	Y+21, r24	; 0x15
    105c:	9e 8b       	std	Y+22, r25	; 0x16
    105e:	af 8b       	std	Y+23, r26	; 0x17
    1060:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1062:	6d 89       	ldd	r22, Y+21	; 0x15
    1064:	7e 89       	ldd	r23, Y+22	; 0x16
    1066:	8f 89       	ldd	r24, Y+23	; 0x17
    1068:	98 8d       	ldd	r25, Y+24	; 0x18
    106a:	20 e0       	ldi	r18, 0x00	; 0
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	40 e8       	ldi	r20, 0x80	; 128
    1070:	5f e3       	ldi	r21, 0x3F	; 63
    1072:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1076:	88 23       	and	r24, r24
    1078:	2c f4       	brge	.+10     	; 0x1084 <LCD_sendCommand+0x17e>
		__ticks = 1;
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	9c 8b       	std	Y+20, r25	; 0x14
    1080:	8b 8b       	std	Y+19, r24	; 0x13
    1082:	3f c0       	rjmp	.+126    	; 0x1102 <LCD_sendCommand+0x1fc>
	else if (__tmp > 65535)
    1084:	6d 89       	ldd	r22, Y+21	; 0x15
    1086:	7e 89       	ldd	r23, Y+22	; 0x16
    1088:	8f 89       	ldd	r24, Y+23	; 0x17
    108a:	98 8d       	ldd	r25, Y+24	; 0x18
    108c:	20 e0       	ldi	r18, 0x00	; 0
    108e:	3f ef       	ldi	r19, 0xFF	; 255
    1090:	4f e7       	ldi	r20, 0x7F	; 127
    1092:	57 e4       	ldi	r21, 0x47	; 71
    1094:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1098:	18 16       	cp	r1, r24
    109a:	4c f5       	brge	.+82     	; 0x10ee <LCD_sendCommand+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    109c:	69 8d       	ldd	r22, Y+25	; 0x19
    109e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    10a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10a4:	20 e0       	ldi	r18, 0x00	; 0
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	40 e2       	ldi	r20, 0x20	; 32
    10aa:	51 e4       	ldi	r21, 0x41	; 65
    10ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10b0:	dc 01       	movw	r26, r24
    10b2:	cb 01       	movw	r24, r22
    10b4:	bc 01       	movw	r22, r24
    10b6:	cd 01       	movw	r24, r26
    10b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10bc:	dc 01       	movw	r26, r24
    10be:	cb 01       	movw	r24, r22
    10c0:	9c 8b       	std	Y+20, r25	; 0x14
    10c2:	8b 8b       	std	Y+19, r24	; 0x13
    10c4:	0f c0       	rjmp	.+30     	; 0x10e4 <LCD_sendCommand+0x1de>
    10c6:	89 e1       	ldi	r24, 0x19	; 25
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	9a 8b       	std	Y+18, r25	; 0x12
    10cc:	89 8b       	std	Y+17, r24	; 0x11
    10ce:	89 89       	ldd	r24, Y+17	; 0x11
    10d0:	9a 89       	ldd	r25, Y+18	; 0x12
    10d2:	01 97       	sbiw	r24, 0x01	; 1
    10d4:	f1 f7       	brne	.-4      	; 0x10d2 <LCD_sendCommand+0x1cc>
    10d6:	9a 8b       	std	Y+18, r25	; 0x12
    10d8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10da:	8b 89       	ldd	r24, Y+19	; 0x13
    10dc:	9c 89       	ldd	r25, Y+20	; 0x14
    10de:	01 97       	sbiw	r24, 0x01	; 1
    10e0:	9c 8b       	std	Y+20, r25	; 0x14
    10e2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10e4:	8b 89       	ldd	r24, Y+19	; 0x13
    10e6:	9c 89       	ldd	r25, Y+20	; 0x14
    10e8:	00 97       	sbiw	r24, 0x00	; 0
    10ea:	69 f7       	brne	.-38     	; 0x10c6 <LCD_sendCommand+0x1c0>
    10ec:	14 c0       	rjmp	.+40     	; 0x1116 <LCD_sendCommand+0x210>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10ee:	6d 89       	ldd	r22, Y+21	; 0x15
    10f0:	7e 89       	ldd	r23, Y+22	; 0x16
    10f2:	8f 89       	ldd	r24, Y+23	; 0x17
    10f4:	98 8d       	ldd	r25, Y+24	; 0x18
    10f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10fa:	dc 01       	movw	r26, r24
    10fc:	cb 01       	movw	r24, r22
    10fe:	9c 8b       	std	Y+20, r25	; 0x14
    1100:	8b 8b       	std	Y+19, r24	; 0x13
    1102:	8b 89       	ldd	r24, Y+19	; 0x13
    1104:	9c 89       	ldd	r25, Y+20	; 0x14
    1106:	98 8b       	std	Y+16, r25	; 0x10
    1108:	8f 87       	std	Y+15, r24	; 0x0f
    110a:	8f 85       	ldd	r24, Y+15	; 0x0f
    110c:	98 89       	ldd	r25, Y+16	; 0x10
    110e:	01 97       	sbiw	r24, 0x01	; 1
    1110:	f1 f7       	brne	.-4      	; 0x110e <LCD_sendCommand+0x208>
    1112:	98 8b       	std	Y+16, r25	; 0x10
    1114:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	ClearBit(PORTC,7);
    1116:	a5 e3       	ldi	r26, 0x35	; 53
    1118:	b0 e0       	ldi	r27, 0x00	; 0
    111a:	e5 e3       	ldi	r30, 0x35	; 53
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	80 81       	ld	r24, Z
    1120:	8f 77       	andi	r24, 0x7F	; 127
    1122:	8c 93       	st	X, r24
    1124:	80 e0       	ldi	r24, 0x00	; 0
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	a0 e8       	ldi	r26, 0x80	; 128
    112a:	bf e3       	ldi	r27, 0x3F	; 63
    112c:	8b 87       	std	Y+11, r24	; 0x0b
    112e:	9c 87       	std	Y+12, r25	; 0x0c
    1130:	ad 87       	std	Y+13, r26	; 0x0d
    1132:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1134:	6b 85       	ldd	r22, Y+11	; 0x0b
    1136:	7c 85       	ldd	r23, Y+12	; 0x0c
    1138:	8d 85       	ldd	r24, Y+13	; 0x0d
    113a:	9e 85       	ldd	r25, Y+14	; 0x0e
    113c:	20 e0       	ldi	r18, 0x00	; 0
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	4a e7       	ldi	r20, 0x7A	; 122
    1142:	53 e4       	ldi	r21, 0x43	; 67
    1144:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1148:	dc 01       	movw	r26, r24
    114a:	cb 01       	movw	r24, r22
    114c:	8f 83       	std	Y+7, r24	; 0x07
    114e:	98 87       	std	Y+8, r25	; 0x08
    1150:	a9 87       	std	Y+9, r26	; 0x09
    1152:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1154:	6f 81       	ldd	r22, Y+7	; 0x07
    1156:	78 85       	ldd	r23, Y+8	; 0x08
    1158:	89 85       	ldd	r24, Y+9	; 0x09
    115a:	9a 85       	ldd	r25, Y+10	; 0x0a
    115c:	20 e0       	ldi	r18, 0x00	; 0
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	40 e8       	ldi	r20, 0x80	; 128
    1162:	5f e3       	ldi	r21, 0x3F	; 63
    1164:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1168:	88 23       	and	r24, r24
    116a:	2c f4       	brge	.+10     	; 0x1176 <LCD_sendCommand+0x270>
		__ticks = 1;
    116c:	81 e0       	ldi	r24, 0x01	; 1
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	9e 83       	std	Y+6, r25	; 0x06
    1172:	8d 83       	std	Y+5, r24	; 0x05
    1174:	3f c0       	rjmp	.+126    	; 0x11f4 <LCD_sendCommand+0x2ee>
	else if (__tmp > 65535)
    1176:	6f 81       	ldd	r22, Y+7	; 0x07
    1178:	78 85       	ldd	r23, Y+8	; 0x08
    117a:	89 85       	ldd	r24, Y+9	; 0x09
    117c:	9a 85       	ldd	r25, Y+10	; 0x0a
    117e:	20 e0       	ldi	r18, 0x00	; 0
    1180:	3f ef       	ldi	r19, 0xFF	; 255
    1182:	4f e7       	ldi	r20, 0x7F	; 127
    1184:	57 e4       	ldi	r21, 0x47	; 71
    1186:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    118a:	18 16       	cp	r1, r24
    118c:	4c f5       	brge	.+82     	; 0x11e0 <LCD_sendCommand+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    118e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1190:	7c 85       	ldd	r23, Y+12	; 0x0c
    1192:	8d 85       	ldd	r24, Y+13	; 0x0d
    1194:	9e 85       	ldd	r25, Y+14	; 0x0e
    1196:	20 e0       	ldi	r18, 0x00	; 0
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	40 e2       	ldi	r20, 0x20	; 32
    119c:	51 e4       	ldi	r21, 0x41	; 65
    119e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11a2:	dc 01       	movw	r26, r24
    11a4:	cb 01       	movw	r24, r22
    11a6:	bc 01       	movw	r22, r24
    11a8:	cd 01       	movw	r24, r26
    11aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11ae:	dc 01       	movw	r26, r24
    11b0:	cb 01       	movw	r24, r22
    11b2:	9e 83       	std	Y+6, r25	; 0x06
    11b4:	8d 83       	std	Y+5, r24	; 0x05
    11b6:	0f c0       	rjmp	.+30     	; 0x11d6 <LCD_sendCommand+0x2d0>
    11b8:	89 e1       	ldi	r24, 0x19	; 25
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	9c 83       	std	Y+4, r25	; 0x04
    11be:	8b 83       	std	Y+3, r24	; 0x03
    11c0:	8b 81       	ldd	r24, Y+3	; 0x03
    11c2:	9c 81       	ldd	r25, Y+4	; 0x04
    11c4:	01 97       	sbiw	r24, 0x01	; 1
    11c6:	f1 f7       	brne	.-4      	; 0x11c4 <LCD_sendCommand+0x2be>
    11c8:	9c 83       	std	Y+4, r25	; 0x04
    11ca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11cc:	8d 81       	ldd	r24, Y+5	; 0x05
    11ce:	9e 81       	ldd	r25, Y+6	; 0x06
    11d0:	01 97       	sbiw	r24, 0x01	; 1
    11d2:	9e 83       	std	Y+6, r25	; 0x06
    11d4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11d6:	8d 81       	ldd	r24, Y+5	; 0x05
    11d8:	9e 81       	ldd	r25, Y+6	; 0x06
    11da:	00 97       	sbiw	r24, 0x00	; 0
    11dc:	69 f7       	brne	.-38     	; 0x11b8 <LCD_sendCommand+0x2b2>
    11de:	14 c0       	rjmp	.+40     	; 0x1208 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11e0:	6f 81       	ldd	r22, Y+7	; 0x07
    11e2:	78 85       	ldd	r23, Y+8	; 0x08
    11e4:	89 85       	ldd	r24, Y+9	; 0x09
    11e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    11e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11ec:	dc 01       	movw	r26, r24
    11ee:	cb 01       	movw	r24, r22
    11f0:	9e 83       	std	Y+6, r25	; 0x06
    11f2:	8d 83       	std	Y+5, r24	; 0x05
    11f4:	8d 81       	ldd	r24, Y+5	; 0x05
    11f6:	9e 81       	ldd	r25, Y+6	; 0x06
    11f8:	9a 83       	std	Y+2, r25	; 0x02
    11fa:	89 83       	std	Y+1, r24	; 0x01
    11fc:	89 81       	ldd	r24, Y+1	; 0x01
    11fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1200:	01 97       	sbiw	r24, 0x01	; 1
    1202:	f1 f7       	brne	.-4      	; 0x1200 <LCD_sendCommand+0x2fa>
    1204:	9a 83       	std	Y+2, r25	; 0x02
    1206:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1208:	ab 96       	adiw	r28, 0x2b	; 43
    120a:	0f b6       	in	r0, 0x3f	; 63
    120c:	f8 94       	cli
    120e:	de bf       	out	0x3e, r29	; 62
    1210:	0f be       	out	0x3f, r0	; 63
    1212:	cd bf       	out	0x3d, r28	; 61
    1214:	cf 91       	pop	r28
    1216:	df 91       	pop	r29
    1218:	08 95       	ret

0000121a <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data){
    121a:	df 93       	push	r29
    121c:	cf 93       	push	r28
    121e:	cd b7       	in	r28, 0x3d	; 61
    1220:	de b7       	in	r29, 0x3e	; 62
    1222:	ac 97       	sbiw	r28, 0x2c	; 44
    1224:	0f b6       	in	r0, 0x3f	; 63
    1226:	f8 94       	cli
    1228:	de bf       	out	0x3e, r29	; 62
    122a:	0f be       	out	0x3f, r0	; 63
    122c:	cd bf       	out	0x3d, r28	; 61
    122e:	9c a7       	std	Y+44, r25	; 0x2c
    1230:	8b a7       	std	Y+43, r24	; 0x2b
	SetBit(PORTC,5);
    1232:	a5 e3       	ldi	r26, 0x35	; 53
    1234:	b0 e0       	ldi	r27, 0x00	; 0
    1236:	e5 e3       	ldi	r30, 0x35	; 53
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 81       	ld	r24, Z
    123c:	80 62       	ori	r24, 0x20	; 32
    123e:	8c 93       	st	X, r24
	ClearBit(PORTC,6);
    1240:	a5 e3       	ldi	r26, 0x35	; 53
    1242:	b0 e0       	ldi	r27, 0x00	; 0
    1244:	e5 e3       	ldi	r30, 0x35	; 53
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	80 81       	ld	r24, Z
    124a:	8f 7b       	andi	r24, 0xBF	; 191
    124c:	8c 93       	st	X, r24
	SetBit(PORTC,7);
    124e:	a5 e3       	ldi	r26, 0x35	; 53
    1250:	b0 e0       	ldi	r27, 0x00	; 0
    1252:	e5 e3       	ldi	r30, 0x35	; 53
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
    1258:	80 68       	ori	r24, 0x80	; 128
    125a:	8c 93       	st	X, r24
    125c:	80 e0       	ldi	r24, 0x00	; 0
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	a0 e8       	ldi	r26, 0x80	; 128
    1262:	bf e3       	ldi	r27, 0x3F	; 63
    1264:	8f a3       	std	Y+39, r24	; 0x27
    1266:	98 a7       	std	Y+40, r25	; 0x28
    1268:	a9 a7       	std	Y+41, r26	; 0x29
    126a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    126c:	6f a1       	ldd	r22, Y+39	; 0x27
    126e:	78 a5       	ldd	r23, Y+40	; 0x28
    1270:	89 a5       	ldd	r24, Y+41	; 0x29
    1272:	9a a5       	ldd	r25, Y+42	; 0x2a
    1274:	20 e0       	ldi	r18, 0x00	; 0
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	4a e7       	ldi	r20, 0x7A	; 122
    127a:	53 e4       	ldi	r21, 0x43	; 67
    127c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1280:	dc 01       	movw	r26, r24
    1282:	cb 01       	movw	r24, r22
    1284:	8b a3       	std	Y+35, r24	; 0x23
    1286:	9c a3       	std	Y+36, r25	; 0x24
    1288:	ad a3       	std	Y+37, r26	; 0x25
    128a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    128c:	6b a1       	ldd	r22, Y+35	; 0x23
    128e:	7c a1       	ldd	r23, Y+36	; 0x24
    1290:	8d a1       	ldd	r24, Y+37	; 0x25
    1292:	9e a1       	ldd	r25, Y+38	; 0x26
    1294:	20 e0       	ldi	r18, 0x00	; 0
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	40 e8       	ldi	r20, 0x80	; 128
    129a:	5f e3       	ldi	r21, 0x3F	; 63
    129c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12a0:	88 23       	and	r24, r24
    12a2:	2c f4       	brge	.+10     	; 0x12ae <LCD_displayCharacter+0x94>
		__ticks = 1;
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	9a a3       	std	Y+34, r25	; 0x22
    12aa:	89 a3       	std	Y+33, r24	; 0x21
    12ac:	3f c0       	rjmp	.+126    	; 0x132c <LCD_displayCharacter+0x112>
	else if (__tmp > 65535)
    12ae:	6b a1       	ldd	r22, Y+35	; 0x23
    12b0:	7c a1       	ldd	r23, Y+36	; 0x24
    12b2:	8d a1       	ldd	r24, Y+37	; 0x25
    12b4:	9e a1       	ldd	r25, Y+38	; 0x26
    12b6:	20 e0       	ldi	r18, 0x00	; 0
    12b8:	3f ef       	ldi	r19, 0xFF	; 255
    12ba:	4f e7       	ldi	r20, 0x7F	; 127
    12bc:	57 e4       	ldi	r21, 0x47	; 71
    12be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12c2:	18 16       	cp	r1, r24
    12c4:	4c f5       	brge	.+82     	; 0x1318 <LCD_displayCharacter+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12c6:	6f a1       	ldd	r22, Y+39	; 0x27
    12c8:	78 a5       	ldd	r23, Y+40	; 0x28
    12ca:	89 a5       	ldd	r24, Y+41	; 0x29
    12cc:	9a a5       	ldd	r25, Y+42	; 0x2a
    12ce:	20 e0       	ldi	r18, 0x00	; 0
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	40 e2       	ldi	r20, 0x20	; 32
    12d4:	51 e4       	ldi	r21, 0x41	; 65
    12d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12da:	dc 01       	movw	r26, r24
    12dc:	cb 01       	movw	r24, r22
    12de:	bc 01       	movw	r22, r24
    12e0:	cd 01       	movw	r24, r26
    12e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12e6:	dc 01       	movw	r26, r24
    12e8:	cb 01       	movw	r24, r22
    12ea:	9a a3       	std	Y+34, r25	; 0x22
    12ec:	89 a3       	std	Y+33, r24	; 0x21
    12ee:	0f c0       	rjmp	.+30     	; 0x130e <LCD_displayCharacter+0xf4>
    12f0:	89 e1       	ldi	r24, 0x19	; 25
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	98 a3       	std	Y+32, r25	; 0x20
    12f6:	8f 8f       	std	Y+31, r24	; 0x1f
    12f8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    12fa:	98 a1       	ldd	r25, Y+32	; 0x20
    12fc:	01 97       	sbiw	r24, 0x01	; 1
    12fe:	f1 f7       	brne	.-4      	; 0x12fc <LCD_displayCharacter+0xe2>
    1300:	98 a3       	std	Y+32, r25	; 0x20
    1302:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1304:	89 a1       	ldd	r24, Y+33	; 0x21
    1306:	9a a1       	ldd	r25, Y+34	; 0x22
    1308:	01 97       	sbiw	r24, 0x01	; 1
    130a:	9a a3       	std	Y+34, r25	; 0x22
    130c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    130e:	89 a1       	ldd	r24, Y+33	; 0x21
    1310:	9a a1       	ldd	r25, Y+34	; 0x22
    1312:	00 97       	sbiw	r24, 0x00	; 0
    1314:	69 f7       	brne	.-38     	; 0x12f0 <LCD_displayCharacter+0xd6>
    1316:	14 c0       	rjmp	.+40     	; 0x1340 <LCD_displayCharacter+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1318:	6b a1       	ldd	r22, Y+35	; 0x23
    131a:	7c a1       	ldd	r23, Y+36	; 0x24
    131c:	8d a1       	ldd	r24, Y+37	; 0x25
    131e:	9e a1       	ldd	r25, Y+38	; 0x26
    1320:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1324:	dc 01       	movw	r26, r24
    1326:	cb 01       	movw	r24, r22
    1328:	9a a3       	std	Y+34, r25	; 0x22
    132a:	89 a3       	std	Y+33, r24	; 0x21
    132c:	89 a1       	ldd	r24, Y+33	; 0x21
    132e:	9a a1       	ldd	r25, Y+34	; 0x22
    1330:	9e 8f       	std	Y+30, r25	; 0x1e
    1332:	8d 8f       	std	Y+29, r24	; 0x1d
    1334:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1336:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1338:	01 97       	sbiw	r24, 0x01	; 1
    133a:	f1 f7       	brne	.-4      	; 0x1338 <LCD_displayCharacter+0x11e>
    133c:	9e 8f       	std	Y+30, r25	; 0x1e
    133e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	PORTD=data;
    1340:	e2 e3       	ldi	r30, 0x32	; 50
    1342:	f0 e0       	ldi	r31, 0x00	; 0
    1344:	8b a5       	ldd	r24, Y+43	; 0x2b
    1346:	80 83       	st	Z, r24
    1348:	80 e0       	ldi	r24, 0x00	; 0
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	a0 e8       	ldi	r26, 0x80	; 128
    134e:	bf e3       	ldi	r27, 0x3F	; 63
    1350:	89 8f       	std	Y+25, r24	; 0x19
    1352:	9a 8f       	std	Y+26, r25	; 0x1a
    1354:	ab 8f       	std	Y+27, r26	; 0x1b
    1356:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1358:	69 8d       	ldd	r22, Y+25	; 0x19
    135a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    135c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    135e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1360:	20 e0       	ldi	r18, 0x00	; 0
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	4a e7       	ldi	r20, 0x7A	; 122
    1366:	53 e4       	ldi	r21, 0x43	; 67
    1368:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    136c:	dc 01       	movw	r26, r24
    136e:	cb 01       	movw	r24, r22
    1370:	8d 8b       	std	Y+21, r24	; 0x15
    1372:	9e 8b       	std	Y+22, r25	; 0x16
    1374:	af 8b       	std	Y+23, r26	; 0x17
    1376:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1378:	6d 89       	ldd	r22, Y+21	; 0x15
    137a:	7e 89       	ldd	r23, Y+22	; 0x16
    137c:	8f 89       	ldd	r24, Y+23	; 0x17
    137e:	98 8d       	ldd	r25, Y+24	; 0x18
    1380:	20 e0       	ldi	r18, 0x00	; 0
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	40 e8       	ldi	r20, 0x80	; 128
    1386:	5f e3       	ldi	r21, 0x3F	; 63
    1388:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    138c:	88 23       	and	r24, r24
    138e:	2c f4       	brge	.+10     	; 0x139a <LCD_displayCharacter+0x180>
		__ticks = 1;
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	9c 8b       	std	Y+20, r25	; 0x14
    1396:	8b 8b       	std	Y+19, r24	; 0x13
    1398:	3f c0       	rjmp	.+126    	; 0x1418 <LCD_displayCharacter+0x1fe>
	else if (__tmp > 65535)
    139a:	6d 89       	ldd	r22, Y+21	; 0x15
    139c:	7e 89       	ldd	r23, Y+22	; 0x16
    139e:	8f 89       	ldd	r24, Y+23	; 0x17
    13a0:	98 8d       	ldd	r25, Y+24	; 0x18
    13a2:	20 e0       	ldi	r18, 0x00	; 0
    13a4:	3f ef       	ldi	r19, 0xFF	; 255
    13a6:	4f e7       	ldi	r20, 0x7F	; 127
    13a8:	57 e4       	ldi	r21, 0x47	; 71
    13aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13ae:	18 16       	cp	r1, r24
    13b0:	4c f5       	brge	.+82     	; 0x1404 <LCD_displayCharacter+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13b2:	69 8d       	ldd	r22, Y+25	; 0x19
    13b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13ba:	20 e0       	ldi	r18, 0x00	; 0
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	40 e2       	ldi	r20, 0x20	; 32
    13c0:	51 e4       	ldi	r21, 0x41	; 65
    13c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13c6:	dc 01       	movw	r26, r24
    13c8:	cb 01       	movw	r24, r22
    13ca:	bc 01       	movw	r22, r24
    13cc:	cd 01       	movw	r24, r26
    13ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13d2:	dc 01       	movw	r26, r24
    13d4:	cb 01       	movw	r24, r22
    13d6:	9c 8b       	std	Y+20, r25	; 0x14
    13d8:	8b 8b       	std	Y+19, r24	; 0x13
    13da:	0f c0       	rjmp	.+30     	; 0x13fa <LCD_displayCharacter+0x1e0>
    13dc:	89 e1       	ldi	r24, 0x19	; 25
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	9a 8b       	std	Y+18, r25	; 0x12
    13e2:	89 8b       	std	Y+17, r24	; 0x11
    13e4:	89 89       	ldd	r24, Y+17	; 0x11
    13e6:	9a 89       	ldd	r25, Y+18	; 0x12
    13e8:	01 97       	sbiw	r24, 0x01	; 1
    13ea:	f1 f7       	brne	.-4      	; 0x13e8 <LCD_displayCharacter+0x1ce>
    13ec:	9a 8b       	std	Y+18, r25	; 0x12
    13ee:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13f0:	8b 89       	ldd	r24, Y+19	; 0x13
    13f2:	9c 89       	ldd	r25, Y+20	; 0x14
    13f4:	01 97       	sbiw	r24, 0x01	; 1
    13f6:	9c 8b       	std	Y+20, r25	; 0x14
    13f8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13fa:	8b 89       	ldd	r24, Y+19	; 0x13
    13fc:	9c 89       	ldd	r25, Y+20	; 0x14
    13fe:	00 97       	sbiw	r24, 0x00	; 0
    1400:	69 f7       	brne	.-38     	; 0x13dc <LCD_displayCharacter+0x1c2>
    1402:	14 c0       	rjmp	.+40     	; 0x142c <LCD_displayCharacter+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1404:	6d 89       	ldd	r22, Y+21	; 0x15
    1406:	7e 89       	ldd	r23, Y+22	; 0x16
    1408:	8f 89       	ldd	r24, Y+23	; 0x17
    140a:	98 8d       	ldd	r25, Y+24	; 0x18
    140c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1410:	dc 01       	movw	r26, r24
    1412:	cb 01       	movw	r24, r22
    1414:	9c 8b       	std	Y+20, r25	; 0x14
    1416:	8b 8b       	std	Y+19, r24	; 0x13
    1418:	8b 89       	ldd	r24, Y+19	; 0x13
    141a:	9c 89       	ldd	r25, Y+20	; 0x14
    141c:	98 8b       	std	Y+16, r25	; 0x10
    141e:	8f 87       	std	Y+15, r24	; 0x0f
    1420:	8f 85       	ldd	r24, Y+15	; 0x0f
    1422:	98 89       	ldd	r25, Y+16	; 0x10
    1424:	01 97       	sbiw	r24, 0x01	; 1
    1426:	f1 f7       	brne	.-4      	; 0x1424 <LCD_displayCharacter+0x20a>
    1428:	98 8b       	std	Y+16, r25	; 0x10
    142a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	ClearBit(PORTC,7);
    142c:	a5 e3       	ldi	r26, 0x35	; 53
    142e:	b0 e0       	ldi	r27, 0x00	; 0
    1430:	e5 e3       	ldi	r30, 0x35	; 53
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	80 81       	ld	r24, Z
    1436:	8f 77       	andi	r24, 0x7F	; 127
    1438:	8c 93       	st	X, r24
    143a:	80 e0       	ldi	r24, 0x00	; 0
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	a0 e8       	ldi	r26, 0x80	; 128
    1440:	bf e3       	ldi	r27, 0x3F	; 63
    1442:	8b 87       	std	Y+11, r24	; 0x0b
    1444:	9c 87       	std	Y+12, r25	; 0x0c
    1446:	ad 87       	std	Y+13, r26	; 0x0d
    1448:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    144a:	6b 85       	ldd	r22, Y+11	; 0x0b
    144c:	7c 85       	ldd	r23, Y+12	; 0x0c
    144e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1450:	9e 85       	ldd	r25, Y+14	; 0x0e
    1452:	20 e0       	ldi	r18, 0x00	; 0
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	4a e7       	ldi	r20, 0x7A	; 122
    1458:	53 e4       	ldi	r21, 0x43	; 67
    145a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    145e:	dc 01       	movw	r26, r24
    1460:	cb 01       	movw	r24, r22
    1462:	8f 83       	std	Y+7, r24	; 0x07
    1464:	98 87       	std	Y+8, r25	; 0x08
    1466:	a9 87       	std	Y+9, r26	; 0x09
    1468:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    146a:	6f 81       	ldd	r22, Y+7	; 0x07
    146c:	78 85       	ldd	r23, Y+8	; 0x08
    146e:	89 85       	ldd	r24, Y+9	; 0x09
    1470:	9a 85       	ldd	r25, Y+10	; 0x0a
    1472:	20 e0       	ldi	r18, 0x00	; 0
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	40 e8       	ldi	r20, 0x80	; 128
    1478:	5f e3       	ldi	r21, 0x3F	; 63
    147a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    147e:	88 23       	and	r24, r24
    1480:	2c f4       	brge	.+10     	; 0x148c <LCD_displayCharacter+0x272>
		__ticks = 1;
    1482:	81 e0       	ldi	r24, 0x01	; 1
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	9e 83       	std	Y+6, r25	; 0x06
    1488:	8d 83       	std	Y+5, r24	; 0x05
    148a:	3f c0       	rjmp	.+126    	; 0x150a <LCD_displayCharacter+0x2f0>
	else if (__tmp > 65535)
    148c:	6f 81       	ldd	r22, Y+7	; 0x07
    148e:	78 85       	ldd	r23, Y+8	; 0x08
    1490:	89 85       	ldd	r24, Y+9	; 0x09
    1492:	9a 85       	ldd	r25, Y+10	; 0x0a
    1494:	20 e0       	ldi	r18, 0x00	; 0
    1496:	3f ef       	ldi	r19, 0xFF	; 255
    1498:	4f e7       	ldi	r20, 0x7F	; 127
    149a:	57 e4       	ldi	r21, 0x47	; 71
    149c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14a0:	18 16       	cp	r1, r24
    14a2:	4c f5       	brge	.+82     	; 0x14f6 <LCD_displayCharacter+0x2dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    14a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    14a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    14aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    14ac:	20 e0       	ldi	r18, 0x00	; 0
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	40 e2       	ldi	r20, 0x20	; 32
    14b2:	51 e4       	ldi	r21, 0x41	; 65
    14b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14b8:	dc 01       	movw	r26, r24
    14ba:	cb 01       	movw	r24, r22
    14bc:	bc 01       	movw	r22, r24
    14be:	cd 01       	movw	r24, r26
    14c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14c4:	dc 01       	movw	r26, r24
    14c6:	cb 01       	movw	r24, r22
    14c8:	9e 83       	std	Y+6, r25	; 0x06
    14ca:	8d 83       	std	Y+5, r24	; 0x05
    14cc:	0f c0       	rjmp	.+30     	; 0x14ec <LCD_displayCharacter+0x2d2>
    14ce:	89 e1       	ldi	r24, 0x19	; 25
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	9c 83       	std	Y+4, r25	; 0x04
    14d4:	8b 83       	std	Y+3, r24	; 0x03
    14d6:	8b 81       	ldd	r24, Y+3	; 0x03
    14d8:	9c 81       	ldd	r25, Y+4	; 0x04
    14da:	01 97       	sbiw	r24, 0x01	; 1
    14dc:	f1 f7       	brne	.-4      	; 0x14da <LCD_displayCharacter+0x2c0>
    14de:	9c 83       	std	Y+4, r25	; 0x04
    14e0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14e2:	8d 81       	ldd	r24, Y+5	; 0x05
    14e4:	9e 81       	ldd	r25, Y+6	; 0x06
    14e6:	01 97       	sbiw	r24, 0x01	; 1
    14e8:	9e 83       	std	Y+6, r25	; 0x06
    14ea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14ec:	8d 81       	ldd	r24, Y+5	; 0x05
    14ee:	9e 81       	ldd	r25, Y+6	; 0x06
    14f0:	00 97       	sbiw	r24, 0x00	; 0
    14f2:	69 f7       	brne	.-38     	; 0x14ce <LCD_displayCharacter+0x2b4>
    14f4:	14 c0       	rjmp	.+40     	; 0x151e <LCD_displayCharacter+0x304>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14f6:	6f 81       	ldd	r22, Y+7	; 0x07
    14f8:	78 85       	ldd	r23, Y+8	; 0x08
    14fa:	89 85       	ldd	r24, Y+9	; 0x09
    14fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    14fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1502:	dc 01       	movw	r26, r24
    1504:	cb 01       	movw	r24, r22
    1506:	9e 83       	std	Y+6, r25	; 0x06
    1508:	8d 83       	std	Y+5, r24	; 0x05
    150a:	8d 81       	ldd	r24, Y+5	; 0x05
    150c:	9e 81       	ldd	r25, Y+6	; 0x06
    150e:	9a 83       	std	Y+2, r25	; 0x02
    1510:	89 83       	std	Y+1, r24	; 0x01
    1512:	89 81       	ldd	r24, Y+1	; 0x01
    1514:	9a 81       	ldd	r25, Y+2	; 0x02
    1516:	01 97       	sbiw	r24, 0x01	; 1
    1518:	f1 f7       	brne	.-4      	; 0x1516 <LCD_displayCharacter+0x2fc>
    151a:	9a 83       	std	Y+2, r25	; 0x02
    151c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    151e:	ac 96       	adiw	r28, 0x2c	; 44
    1520:	0f b6       	in	r0, 0x3f	; 63
    1522:	f8 94       	cli
    1524:	de bf       	out	0x3e, r29	; 62
    1526:	0f be       	out	0x3f, r0	; 63
    1528:	cd bf       	out	0x3d, r28	; 61
    152a:	cf 91       	pop	r28
    152c:	df 91       	pop	r29
    152e:	08 95       	ret

00001530 <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col){
    1530:	df 93       	push	r29
    1532:	cf 93       	push	r28
    1534:	00 d0       	rcall	.+0      	; 0x1536 <LCD_goToRowColumn+0x6>
    1536:	00 d0       	rcall	.+0      	; 0x1538 <LCD_goToRowColumn+0x8>
    1538:	00 d0       	rcall	.+0      	; 0x153a <LCD_goToRowColumn+0xa>
    153a:	cd b7       	in	r28, 0x3d	; 61
    153c:	de b7       	in	r29, 0x3e	; 62
    153e:	9a 83       	std	Y+2, r25	; 0x02
    1540:	89 83       	std	Y+1, r24	; 0x01
    1542:	7c 83       	std	Y+4, r23	; 0x04
    1544:	6b 83       	std	Y+3, r22	; 0x03
		/* first of all calculate the required address */
		switch(row)
    1546:	89 81       	ldd	r24, Y+1	; 0x01
    1548:	9a 81       	ldd	r25, Y+2	; 0x02
    154a:	9e 83       	std	Y+6, r25	; 0x06
    154c:	8d 83       	std	Y+5, r24	; 0x05
    154e:	8d 81       	ldd	r24, Y+5	; 0x05
    1550:	9e 81       	ldd	r25, Y+6	; 0x06
    1552:	00 97       	sbiw	r24, 0x00	; 0
    1554:	31 f0       	breq	.+12     	; 0x1562 <LCD_goToRowColumn+0x32>
    1556:	8d 81       	ldd	r24, Y+5	; 0x05
    1558:	9e 81       	ldd	r25, Y+6	; 0x06
    155a:	81 30       	cpi	r24, 0x01	; 1
    155c:	91 05       	cpc	r25, r1
    155e:	31 f0       	breq	.+12     	; 0x156c <LCD_goToRowColumn+0x3c>
    1560:	0a c0       	rjmp	.+20     	; 0x1576 <LCD_goToRowColumn+0x46>
		{
			case 0:
					LCD_sendCommand(col | SET_CURSOR_LOCATION);
    1562:	8b 81       	ldd	r24, Y+3	; 0x03
    1564:	80 68       	ori	r24, 0x80	; 128
    1566:	0e 94 83 07 	call	0xf06	; 0xf06 <LCD_sendCommand>
    156a:	05 c0       	rjmp	.+10     	; 0x1576 <LCD_goToRowColumn+0x46>

					break;
			case 1:
					LCD_sendCommand(col+0x40 | SET_CURSOR_LOCATION);
    156c:	8b 81       	ldd	r24, Y+3	; 0x03
    156e:	80 5c       	subi	r24, 0xC0	; 192
    1570:	80 68       	ori	r24, 0x80	; 128
    1572:	0e 94 83 07 	call	0xf06	; 0xf06 <LCD_sendCommand>
		}
		/* to write to a specific address in the LCD
		 * we need to apply the corresponding command 0b10000000 + Address */
}
    1576:	26 96       	adiw	r28, 0x06	; 6
    1578:	0f b6       	in	r0, 0x3f	; 63
    157a:	f8 94       	cli
    157c:	de bf       	out	0x3e, r29	; 62
    157e:	0f be       	out	0x3f, r0	; 63
    1580:	cd bf       	out	0x3d, r28	; 61
    1582:	cf 91       	pop	r28
    1584:	df 91       	pop	r29
    1586:	08 95       	ret

00001588 <LCD_displayString>:
void LCD_displayString(const char *Str)
{
    1588:	df 93       	push	r29
    158a:	cf 93       	push	r28
    158c:	00 d0       	rcall	.+0      	; 0x158e <LCD_displayString+0x6>
    158e:	00 d0       	rcall	.+0      	; 0x1590 <LCD_displayString+0x8>
    1590:	cd b7       	in	r28, 0x3d	; 61
    1592:	de b7       	in	r29, 0x3e	; 62
    1594:	9c 83       	std	Y+4, r25	; 0x04
    1596:	8b 83       	std	Y+3, r24	; 0x03
	uint8 i = 0;
    1598:	1a 82       	std	Y+2, r1	; 0x02
    159a:	19 82       	std	Y+1, r1	; 0x01
    159c:	11 c0       	rjmp	.+34     	; 0x15c0 <LCD_displayString+0x38>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    159e:	2b 81       	ldd	r18, Y+3	; 0x03
    15a0:	3c 81       	ldd	r19, Y+4	; 0x04
    15a2:	89 81       	ldd	r24, Y+1	; 0x01
    15a4:	9a 81       	ldd	r25, Y+2	; 0x02
    15a6:	f9 01       	movw	r30, r18
    15a8:	e8 0f       	add	r30, r24
    15aa:	f9 1f       	adc	r31, r25
    15ac:	80 81       	ld	r24, Z
    15ae:	88 2f       	mov	r24, r24
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	0e 94 0d 09 	call	0x121a	; 0x121a <LCD_displayCharacter>
		i++;
    15b6:	89 81       	ldd	r24, Y+1	; 0x01
    15b8:	9a 81       	ldd	r25, Y+2	; 0x02
    15ba:	01 96       	adiw	r24, 0x01	; 1
    15bc:	9a 83       	std	Y+2, r25	; 0x02
    15be:	89 83       	std	Y+1, r24	; 0x01
		 * we need to apply the corresponding command 0b10000000 + Address */
}
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    15c0:	2b 81       	ldd	r18, Y+3	; 0x03
    15c2:	3c 81       	ldd	r19, Y+4	; 0x04
    15c4:	89 81       	ldd	r24, Y+1	; 0x01
    15c6:	9a 81       	ldd	r25, Y+2	; 0x02
    15c8:	f9 01       	movw	r30, r18
    15ca:	e8 0f       	add	r30, r24
    15cc:	f9 1f       	adc	r31, r25
    15ce:	80 81       	ld	r24, Z
    15d0:	88 23       	and	r24, r24
    15d2:	29 f7       	brne	.-54     	; 0x159e <LCD_displayString+0x16>
	{
		LCD_displayCharacter(Str[i]);
		i++;
	}
}
    15d4:	0f 90       	pop	r0
    15d6:	0f 90       	pop	r0
    15d8:	0f 90       	pop	r0
    15da:	0f 90       	pop	r0
    15dc:	cf 91       	pop	r28
    15de:	df 91       	pop	r29
    15e0:	08 95       	ret

000015e2 <LCD_clearScreen>:
void LCD_clearScreen(void)
{
    15e2:	df 93       	push	r29
    15e4:	cf 93       	push	r28
    15e6:	cd b7       	in	r28, 0x3d	; 61
    15e8:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display
    15ea:	81 e0       	ldi	r24, 0x01	; 1
    15ec:	0e 94 83 07 	call	0xf06	; 0xf06 <LCD_sendCommand>
}
    15f0:	cf 91       	pop	r28
    15f2:	df 91       	pop	r29
    15f4:	08 95       	ret

000015f6 <SPI_initMaster>:
 */

#include "SPI.h"

void SPI_initMaster(void)
{
    15f6:	df 93       	push	r29
    15f8:	cf 93       	push	r28
    15fa:	cd b7       	in	r28, 0x3d	; 61
    15fc:	de b7       	in	r29, 0x3e	; 62
	 * SS(PB4)   --> Output
	 * MOSI(PB5) --> Output
	 * MISO(PB6) --> Input
	 * SCK(PB7) --> Output
	 ********************************************/
	SPCR = (1<<SPE) | (1<<MSTR); // enable SPI + enable Master + choose SPI clock = Fosc/4
    15fe:	ed e2       	ldi	r30, 0x2D	; 45
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	80 e5       	ldi	r24, 0x50	; 80
    1604:	80 83       	st	Z, r24
	DDRB = DDRB | (1<<PB4);
    1606:	a7 e3       	ldi	r26, 0x37	; 55
    1608:	b0 e0       	ldi	r27, 0x00	; 0
    160a:	e7 e3       	ldi	r30, 0x37	; 55
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	80 81       	ld	r24, Z
    1610:	80 61       	ori	r24, 0x10	; 16
    1612:	8c 93       	st	X, r24
	DDRB = DDRB | (1<<PB5);
    1614:	a7 e3       	ldi	r26, 0x37	; 55
    1616:	b0 e0       	ldi	r27, 0x00	; 0
    1618:	e7 e3       	ldi	r30, 0x37	; 55
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	80 81       	ld	r24, Z
    161e:	80 62       	ori	r24, 0x20	; 32
    1620:	8c 93       	st	X, r24
	DDRB = DDRB & ~(1<<PB6);
    1622:	a7 e3       	ldi	r26, 0x37	; 55
    1624:	b0 e0       	ldi	r27, 0x00	; 0
    1626:	e7 e3       	ldi	r30, 0x37	; 55
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	80 81       	ld	r24, Z
    162c:	8f 7b       	andi	r24, 0xBF	; 191
    162e:	8c 93       	st	X, r24
	DDRB = DDRB | (1<<PB7);
    1630:	a7 e3       	ldi	r26, 0x37	; 55
    1632:	b0 e0       	ldi	r27, 0x00	; 0
    1634:	e7 e3       	ldi	r30, 0x37	; 55
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	80 81       	ld	r24, Z
    163a:	80 68       	ori	r24, 0x80	; 128
    163c:	8c 93       	st	X, r24


}
    163e:	cf 91       	pop	r28
    1640:	df 91       	pop	r29
    1642:	08 95       	ret

00001644 <SPI_initSlave>:

void SPI_initSlave(void)
{
    1644:	df 93       	push	r29
    1646:	cf 93       	push	r28
    1648:	cd b7       	in	r28, 0x3d	; 61
    164a:	de b7       	in	r29, 0x3e	; 62
	 * SS(PB4)   --> Input
	 * MOSI(PB5) --> Input
	 * MISO(PB6) --> Output
	 * SCK(PB7) --> Input
	 ********************************************/
	DDRB = DDRB & (~(1<<PB4));
    164c:	a7 e3       	ldi	r26, 0x37	; 55
    164e:	b0 e0       	ldi	r27, 0x00	; 0
    1650:	e7 e3       	ldi	r30, 0x37	; 55
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	80 81       	ld	r24, Z
    1656:	8f 7e       	andi	r24, 0xEF	; 239
    1658:	8c 93       	st	X, r24
	DDRB = DDRB & (~(1<<PB5));
    165a:	a7 e3       	ldi	r26, 0x37	; 55
    165c:	b0 e0       	ldi	r27, 0x00	; 0
    165e:	e7 e3       	ldi	r30, 0x37	; 55
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	80 81       	ld	r24, Z
    1664:	8f 7d       	andi	r24, 0xDF	; 223
    1666:	8c 93       	st	X, r24
	DDRB = DDRB | (1<<PB6);
    1668:	a7 e3       	ldi	r26, 0x37	; 55
    166a:	b0 e0       	ldi	r27, 0x00	; 0
    166c:	e7 e3       	ldi	r30, 0x37	; 55
    166e:	f0 e0       	ldi	r31, 0x00	; 0
    1670:	80 81       	ld	r24, Z
    1672:	80 64       	ori	r24, 0x40	; 64
    1674:	8c 93       	st	X, r24
	DDRB = DDRB & (~(1<<PB7));
    1676:	a7 e3       	ldi	r26, 0x37	; 55
    1678:	b0 e0       	ldi	r27, 0x00	; 0
    167a:	e7 e3       	ldi	r30, 0x37	; 55
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	80 81       	ld	r24, Z
    1680:	8f 77       	andi	r24, 0x7F	; 127
    1682:	8c 93       	st	X, r24

	SPCR = (1<<SPE); // just enable SPI + choose SPI clock = Fosc/4
    1684:	ed e2       	ldi	r30, 0x2D	; 45
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	80 e4       	ldi	r24, 0x40	; 64
    168a:	80 83       	st	Z, r24
}
    168c:	cf 91       	pop	r28
    168e:	df 91       	pop	r29
    1690:	08 95       	ret

00001692 <SPI_Read>:
//	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);	/* Enable SPI in master mode
//						with Fosc/16 */
//	SPSR &= ~(1<<SPI2X);			/* Disable speed doubler */
//}
char SPI_Read()				/* SPI read data function */
{
    1692:	df 93       	push	r29
    1694:	cf 93       	push	r28
    1696:	cd b7       	in	r28, 0x3d	; 61
    1698:	de b7       	in	r29, 0x3e	; 62
	SPDR = 0xFF;
    169a:	ef e2       	ldi	r30, 0x2F	; 47
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	8f ef       	ldi	r24, 0xFF	; 255
    16a0:	80 83       	st	Z, r24
	while(!(SPSR & (1<<SPIF)));	/* Wait till reception complete */
    16a2:	ee e2       	ldi	r30, 0x2E	; 46
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	80 81       	ld	r24, Z
    16a8:	88 23       	and	r24, r24
    16aa:	dc f7       	brge	.-10     	; 0x16a2 <SPI_Read+0x10>
	return(SPDR);			/* Return received data */
    16ac:	ef e2       	ldi	r30, 0x2F	; 47
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	80 81       	ld	r24, Z
}
    16b2:	cf 91       	pop	r28
    16b4:	df 91       	pop	r29
    16b6:	08 95       	ret

000016b8 <SPI_Write>:
void SPI_Write(char data)		/* SPI write data function */
{
    16b8:	df 93       	push	r29
    16ba:	cf 93       	push	r28
    16bc:	00 d0       	rcall	.+0      	; 0x16be <SPI_Write+0x6>
    16be:	cd b7       	in	r28, 0x3d	; 61
    16c0:	de b7       	in	r29, 0x3e	; 62
    16c2:	8a 83       	std	Y+2, r24	; 0x02
	char flush_buffer;
	SPDR = data;			/* Write data to SPI data register */
    16c4:	ef e2       	ldi	r30, 0x2F	; 47
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ca:	80 83       	st	Z, r24
	while(!(SPSR & (1<<SPIF)));	/* Wait till transmission complete */
    16cc:	ee e2       	ldi	r30, 0x2E	; 46
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	80 81       	ld	r24, Z
    16d2:	88 23       	and	r24, r24
    16d4:	dc f7       	brge	.-10     	; 0x16cc <SPI_Write+0x14>
	flush_buffer = SPDR;		/* Flush received data */
    16d6:	ef e2       	ldi	r30, 0x2F	; 47
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	80 81       	ld	r24, Z
    16dc:	89 83       	std	Y+1, r24	; 0x01
/* Note: SPIF flag is cleared by first reading SPSR (with SPIF set) and then accessing SPDR hence flush buffer used here to access SPDR after SPSR read */
}
    16de:	0f 90       	pop	r0
    16e0:	0f 90       	pop	r0
    16e2:	cf 91       	pop	r28
    16e4:	df 91       	pop	r29
    16e6:	08 95       	ret

000016e8 <SPI_sendByte>:

void SPI_sendByte(unsigned char data)
{
    16e8:	df 93       	push	r29
    16ea:	cf 93       	push	r28
    16ec:	0f 92       	push	r0
    16ee:	cd b7       	in	r28, 0x3d	; 61
    16f0:	de b7       	in	r29, 0x3e	; 62
    16f2:	89 83       	std	Y+1, r24	; 0x01
	SPDR = data; //send data by SPI
    16f4:	ef e2       	ldi	r30, 0x2F	; 47
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
    16f8:	89 81       	ldd	r24, Y+1	; 0x01
    16fa:	80 83       	st	Z, r24
	while(BIT_IS_CLEAR(SPSR,SPIF)){} //wait until SPI interrupt flag=1 (data is sent correctly)
    16fc:	ee e2       	ldi	r30, 0x2E	; 46
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	80 81       	ld	r24, Z
    1702:	88 23       	and	r24, r24
    1704:	dc f7       	brge	.-10     	; 0x16fc <SPI_sendByte+0x14>
//	_delay_ms(15);
	//while(!(SPSR & (1<<7)));
}
    1706:	0f 90       	pop	r0
    1708:	cf 91       	pop	r28
    170a:	df 91       	pop	r29
    170c:	08 95       	ret

0000170e <SPI_recieveByte>:

unsigned char SPI_recieveByte(void)
{
    170e:	df 93       	push	r29
    1710:	cf 93       	push	r28
    1712:	cd b7       	in	r28, 0x3d	; 61
    1714:	de b7       	in	r29, 0x3e	; 62
   while(BIT_IS_CLEAR(SPSR,SPIF)){} //wait until SPI interrupt flag=1(data is receive correctly)
    1716:	ee e2       	ldi	r30, 0x2E	; 46
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	80 81       	ld	r24, Z
    171c:	88 23       	and	r24, r24
    171e:	dc f7       	brge	.-10     	; 0x1716 <SPI_recieveByte+0x8>
   return SPDR; //return the received byte from SPI data register
    1720:	ef e2       	ldi	r30, 0x2F	; 47
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	80 81       	ld	r24, Z
}
    1726:	cf 91       	pop	r28
    1728:	df 91       	pop	r29
    172a:	08 95       	ret

0000172c <SPI_SendString>:

void SPI_SendString(const unsigned char *Str)
{
    172c:	df 93       	push	r29
    172e:	cf 93       	push	r28
    1730:	cd b7       	in	r28, 0x3d	; 61
    1732:	de b7       	in	r29, 0x3e	; 62
    1734:	61 97       	sbiw	r28, 0x11	; 17
    1736:	0f b6       	in	r0, 0x3f	; 63
    1738:	f8 94       	cli
    173a:	de bf       	out	0x3e, r29	; 62
    173c:	0f be       	out	0x3f, r0	; 63
    173e:	cd bf       	out	0x3d, r28	; 61
    1740:	99 8b       	std	Y+17, r25	; 0x11
    1742:	88 8b       	std	Y+16, r24	; 0x10
	unsigned char i = 0;
    1744:	1f 86       	std	Y+15, r1	; 0x0f
    1746:	80 c0       	rjmp	.+256    	; 0x1848 <SPI_SendString+0x11c>
	while(Str[i] != '\0')
	{
		SPI_sendByte(Str[i]);
    1748:	8f 85       	ldd	r24, Y+15	; 0x0f
    174a:	28 2f       	mov	r18, r24
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	88 89       	ldd	r24, Y+16	; 0x10
    1750:	99 89       	ldd	r25, Y+17	; 0x11
    1752:	fc 01       	movw	r30, r24
    1754:	e2 0f       	add	r30, r18
    1756:	f3 1f       	adc	r31, r19
    1758:	80 81       	ld	r24, Z
    175a:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <SPI_sendByte>
		i++;
    175e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1760:	8f 5f       	subi	r24, 0xFF	; 255
    1762:	8f 87       	std	Y+15, r24	; 0x0f
    1764:	80 e0       	ldi	r24, 0x00	; 0
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	a0 ef       	ldi	r26, 0xF0	; 240
    176a:	b1 e4       	ldi	r27, 0x41	; 65
    176c:	8b 87       	std	Y+11, r24	; 0x0b
    176e:	9c 87       	std	Y+12, r25	; 0x0c
    1770:	ad 87       	std	Y+13, r26	; 0x0d
    1772:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1774:	6b 85       	ldd	r22, Y+11	; 0x0b
    1776:	7c 85       	ldd	r23, Y+12	; 0x0c
    1778:	8d 85       	ldd	r24, Y+13	; 0x0d
    177a:	9e 85       	ldd	r25, Y+14	; 0x0e
    177c:	20 e0       	ldi	r18, 0x00	; 0
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	4a e7       	ldi	r20, 0x7A	; 122
    1782:	53 e4       	ldi	r21, 0x43	; 67
    1784:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1788:	dc 01       	movw	r26, r24
    178a:	cb 01       	movw	r24, r22
    178c:	8f 83       	std	Y+7, r24	; 0x07
    178e:	98 87       	std	Y+8, r25	; 0x08
    1790:	a9 87       	std	Y+9, r26	; 0x09
    1792:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1794:	6f 81       	ldd	r22, Y+7	; 0x07
    1796:	78 85       	ldd	r23, Y+8	; 0x08
    1798:	89 85       	ldd	r24, Y+9	; 0x09
    179a:	9a 85       	ldd	r25, Y+10	; 0x0a
    179c:	20 e0       	ldi	r18, 0x00	; 0
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	40 e8       	ldi	r20, 0x80	; 128
    17a2:	5f e3       	ldi	r21, 0x3F	; 63
    17a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17a8:	88 23       	and	r24, r24
    17aa:	2c f4       	brge	.+10     	; 0x17b6 <SPI_SendString+0x8a>
		__ticks = 1;
    17ac:	81 e0       	ldi	r24, 0x01	; 1
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	9e 83       	std	Y+6, r25	; 0x06
    17b2:	8d 83       	std	Y+5, r24	; 0x05
    17b4:	3f c0       	rjmp	.+126    	; 0x1834 <SPI_SendString+0x108>
	else if (__tmp > 65535)
    17b6:	6f 81       	ldd	r22, Y+7	; 0x07
    17b8:	78 85       	ldd	r23, Y+8	; 0x08
    17ba:	89 85       	ldd	r24, Y+9	; 0x09
    17bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    17be:	20 e0       	ldi	r18, 0x00	; 0
    17c0:	3f ef       	ldi	r19, 0xFF	; 255
    17c2:	4f e7       	ldi	r20, 0x7F	; 127
    17c4:	57 e4       	ldi	r21, 0x47	; 71
    17c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17ca:	18 16       	cp	r1, r24
    17cc:	4c f5       	brge	.+82     	; 0x1820 <SPI_SendString+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    17d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    17d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    17d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    17d6:	20 e0       	ldi	r18, 0x00	; 0
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	40 e2       	ldi	r20, 0x20	; 32
    17dc:	51 e4       	ldi	r21, 0x41	; 65
    17de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17e2:	dc 01       	movw	r26, r24
    17e4:	cb 01       	movw	r24, r22
    17e6:	bc 01       	movw	r22, r24
    17e8:	cd 01       	movw	r24, r26
    17ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ee:	dc 01       	movw	r26, r24
    17f0:	cb 01       	movw	r24, r22
    17f2:	9e 83       	std	Y+6, r25	; 0x06
    17f4:	8d 83       	std	Y+5, r24	; 0x05
    17f6:	0f c0       	rjmp	.+30     	; 0x1816 <SPI_SendString+0xea>
    17f8:	89 e1       	ldi	r24, 0x19	; 25
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	9c 83       	std	Y+4, r25	; 0x04
    17fe:	8b 83       	std	Y+3, r24	; 0x03
    1800:	8b 81       	ldd	r24, Y+3	; 0x03
    1802:	9c 81       	ldd	r25, Y+4	; 0x04
    1804:	01 97       	sbiw	r24, 0x01	; 1
    1806:	f1 f7       	brne	.-4      	; 0x1804 <SPI_SendString+0xd8>
    1808:	9c 83       	std	Y+4, r25	; 0x04
    180a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    180c:	8d 81       	ldd	r24, Y+5	; 0x05
    180e:	9e 81       	ldd	r25, Y+6	; 0x06
    1810:	01 97       	sbiw	r24, 0x01	; 1
    1812:	9e 83       	std	Y+6, r25	; 0x06
    1814:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1816:	8d 81       	ldd	r24, Y+5	; 0x05
    1818:	9e 81       	ldd	r25, Y+6	; 0x06
    181a:	00 97       	sbiw	r24, 0x00	; 0
    181c:	69 f7       	brne	.-38     	; 0x17f8 <SPI_SendString+0xcc>
    181e:	14 c0       	rjmp	.+40     	; 0x1848 <SPI_SendString+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1820:	6f 81       	ldd	r22, Y+7	; 0x07
    1822:	78 85       	ldd	r23, Y+8	; 0x08
    1824:	89 85       	ldd	r24, Y+9	; 0x09
    1826:	9a 85       	ldd	r25, Y+10	; 0x0a
    1828:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    182c:	dc 01       	movw	r26, r24
    182e:	cb 01       	movw	r24, r22
    1830:	9e 83       	std	Y+6, r25	; 0x06
    1832:	8d 83       	std	Y+5, r24	; 0x05
    1834:	8d 81       	ldd	r24, Y+5	; 0x05
    1836:	9e 81       	ldd	r25, Y+6	; 0x06
    1838:	9a 83       	std	Y+2, r25	; 0x02
    183a:	89 83       	std	Y+1, r24	; 0x01
    183c:	89 81       	ldd	r24, Y+1	; 0x01
    183e:	9a 81       	ldd	r25, Y+2	; 0x02
    1840:	01 97       	sbiw	r24, 0x01	; 1
    1842:	f1 f7       	brne	.-4      	; 0x1840 <SPI_SendString+0x114>
    1844:	9a 83       	std	Y+2, r25	; 0x02
    1846:	89 83       	std	Y+1, r24	; 0x01
}

void SPI_SendString(const unsigned char *Str)
{
	unsigned char i = 0;
	while(Str[i] != '\0')
    1848:	8f 85       	ldd	r24, Y+15	; 0x0f
    184a:	28 2f       	mov	r18, r24
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	88 89       	ldd	r24, Y+16	; 0x10
    1850:	99 89       	ldd	r25, Y+17	; 0x11
    1852:	fc 01       	movw	r30, r24
    1854:	e2 0f       	add	r30, r18
    1856:	f3 1f       	adc	r31, r19
    1858:	80 81       	ld	r24, Z
    185a:	88 23       	and	r24, r24
    185c:	09 f0       	breq	.+2      	; 0x1860 <SPI_SendString+0x134>
    185e:	74 cf       	rjmp	.-280    	; 0x1748 <SPI_SendString+0x1c>
		SPI_sendByte(Str[i]);
		i++;
		_delay_ms(30);
	}
//	SPI_sendByte('#');
}
    1860:	61 96       	adiw	r28, 0x11	; 17
    1862:	0f b6       	in	r0, 0x3f	; 63
    1864:	f8 94       	cli
    1866:	de bf       	out	0x3e, r29	; 62
    1868:	0f be       	out	0x3f, r0	; 63
    186a:	cd bf       	out	0x3d, r28	; 61
    186c:	cf 91       	pop	r28
    186e:	df 91       	pop	r29
    1870:	08 95       	ret

00001872 <SPI_ReceiveString>:

void SPI_ReceiveString(char *Str)
{
    1872:	0f 93       	push	r16
    1874:	1f 93       	push	r17
    1876:	df 93       	push	r29
    1878:	cf 93       	push	r28
    187a:	00 d0       	rcall	.+0      	; 0x187c <SPI_ReceiveString+0xa>
    187c:	0f 92       	push	r0
    187e:	cd b7       	in	r28, 0x3d	; 61
    1880:	de b7       	in	r29, 0x3e	; 62
    1882:	9b 83       	std	Y+3, r25	; 0x03
    1884:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char i = 0;
    1886:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = SPI_recieveByte();
    1888:	89 81       	ldd	r24, Y+1	; 0x01
    188a:	28 2f       	mov	r18, r24
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	8a 81       	ldd	r24, Y+2	; 0x02
    1890:	9b 81       	ldd	r25, Y+3	; 0x03
    1892:	8c 01       	movw	r16, r24
    1894:	02 0f       	add	r16, r18
    1896:	13 1f       	adc	r17, r19
    1898:	0e 94 87 0b 	call	0x170e	; 0x170e <SPI_recieveByte>
    189c:	f8 01       	movw	r30, r16
    189e:	80 83       	st	Z, r24
    18a0:	0f c0       	rjmp	.+30     	; 0x18c0 <SPI_ReceiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    18a2:	89 81       	ldd	r24, Y+1	; 0x01
    18a4:	8f 5f       	subi	r24, 0xFF	; 255
    18a6:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = SPI_recieveByte();
    18a8:	89 81       	ldd	r24, Y+1	; 0x01
    18aa:	28 2f       	mov	r18, r24
    18ac:	30 e0       	ldi	r19, 0x00	; 0
    18ae:	8a 81       	ldd	r24, Y+2	; 0x02
    18b0:	9b 81       	ldd	r25, Y+3	; 0x03
    18b2:	8c 01       	movw	r16, r24
    18b4:	02 0f       	add	r16, r18
    18b6:	13 1f       	adc	r17, r19
    18b8:	0e 94 87 0b 	call	0x170e	; 0x170e <SPI_recieveByte>
    18bc:	f8 01       	movw	r30, r16
    18be:	80 83       	st	Z, r24

void SPI_ReceiveString(char *Str)
{
	unsigned char i = 0;
	Str[i] = SPI_recieveByte();
	while(Str[i] != '#')
    18c0:	89 81       	ldd	r24, Y+1	; 0x01
    18c2:	28 2f       	mov	r18, r24
    18c4:	30 e0       	ldi	r19, 0x00	; 0
    18c6:	8a 81       	ldd	r24, Y+2	; 0x02
    18c8:	9b 81       	ldd	r25, Y+3	; 0x03
    18ca:	fc 01       	movw	r30, r24
    18cc:	e2 0f       	add	r30, r18
    18ce:	f3 1f       	adc	r31, r19
    18d0:	80 81       	ld	r24, Z
    18d2:	83 32       	cpi	r24, 0x23	; 35
    18d4:	31 f7       	brne	.-52     	; 0x18a2 <SPI_ReceiveString+0x30>
	{
		i++;
		Str[i] = SPI_recieveByte();
	}
	Str[i] = '\0';
    18d6:	89 81       	ldd	r24, Y+1	; 0x01
    18d8:	28 2f       	mov	r18, r24
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	8a 81       	ldd	r24, Y+2	; 0x02
    18de:	9b 81       	ldd	r25, Y+3	; 0x03
    18e0:	fc 01       	movw	r30, r24
    18e2:	e2 0f       	add	r30, r18
    18e4:	f3 1f       	adc	r31, r19
    18e6:	10 82       	st	Z, r1
}
    18e8:	0f 90       	pop	r0
    18ea:	0f 90       	pop	r0
    18ec:	0f 90       	pop	r0
    18ee:	cf 91       	pop	r28
    18f0:	df 91       	pop	r29
    18f2:	1f 91       	pop	r17
    18f4:	0f 91       	pop	r16
    18f6:	08 95       	ret

000018f8 <EEPROM_Write>:
 *      Author: batma
 */

#include "eeprom.h"
	void EEPROM_Write(int location_Address,unsigned char Copy_Data)
	{
    18f8:	df 93       	push	r29
    18fa:	cf 93       	push	r28
    18fc:	cd b7       	in	r28, 0x3d	; 61
    18fe:	de b7       	in	r29, 0x3e	; 62
    1900:	62 97       	sbiw	r28, 0x12	; 18
    1902:	0f b6       	in	r0, 0x3f	; 63
    1904:	f8 94       	cli
    1906:	de bf       	out	0x3e, r29	; 62
    1908:	0f be       	out	0x3f, r0	; 63
    190a:	cd bf       	out	0x3d, r28	; 61
    190c:	99 8b       	std	Y+17, r25	; 0x11
    190e:	88 8b       	std	Y+16, r24	; 0x10
    1910:	6a 8b       	std	Y+18, r22	; 0x12
		// data is 10 bit bec EEPROM 8 K
		// 1010 000 --> 1010 A2 B10 B9
		unsigned char location_Address_Packet=EEPROM_FIXED_ADDRESS | (0<<2) |(unsigned char)(location_Address>>8); // from location add we need the first 3 bit for add location
    1912:	88 89       	ldd	r24, Y+16	; 0x10
    1914:	99 89       	ldd	r25, Y+17	; 0x11
    1916:	89 2f       	mov	r24, r25
    1918:	99 0f       	add	r25, r25
    191a:	99 0b       	sbc	r25, r25
    191c:	80 65       	ori	r24, 0x50	; 80
    191e:	8f 87       	std	Y+15, r24	; 0x0f
		//send start condition
		TWI_SendStartCondition();
    1920:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <TWI_SendStartCondition>
		//send the addressPacket
		TWI_SendSlaveAddressWithWrite(location_Address_Packet);
    1924:	8f 85       	ldd	r24, Y+15	; 0x0f
    1926:	88 2f       	mov	r24, r24
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <TWI_SendSlaveAddressWithWrite>
		// send the rest 8bit of the location address
		TWI_MasterWriteDataByte((unsigned char)location_Address);
    192e:	88 89       	ldd	r24, Y+16	; 0x10
    1930:	88 2f       	mov	r24, r24
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <TWI_MasterWriteDataByte>
		// send the data
		TWI_MasterWriteDataByte(Copy_Data);
    1938:	8a 89       	ldd	r24, Y+18	; 0x12
    193a:	88 2f       	mov	r24, r24
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <TWI_MasterWriteDataByte>
		//stop the condition of TWI
		TWI_SendStopCondition();
    1942:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <TWI_SendStopCondition>
    1946:	80 e0       	ldi	r24, 0x00	; 0
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	a0 e2       	ldi	r26, 0x20	; 32
    194c:	b1 e4       	ldi	r27, 0x41	; 65
    194e:	8b 87       	std	Y+11, r24	; 0x0b
    1950:	9c 87       	std	Y+12, r25	; 0x0c
    1952:	ad 87       	std	Y+13, r26	; 0x0d
    1954:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1956:	6b 85       	ldd	r22, Y+11	; 0x0b
    1958:	7c 85       	ldd	r23, Y+12	; 0x0c
    195a:	8d 85       	ldd	r24, Y+13	; 0x0d
    195c:	9e 85       	ldd	r25, Y+14	; 0x0e
    195e:	20 e0       	ldi	r18, 0x00	; 0
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	4a e7       	ldi	r20, 0x7A	; 122
    1964:	53 e4       	ldi	r21, 0x43	; 67
    1966:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    196a:	dc 01       	movw	r26, r24
    196c:	cb 01       	movw	r24, r22
    196e:	8f 83       	std	Y+7, r24	; 0x07
    1970:	98 87       	std	Y+8, r25	; 0x08
    1972:	a9 87       	std	Y+9, r26	; 0x09
    1974:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1976:	6f 81       	ldd	r22, Y+7	; 0x07
    1978:	78 85       	ldd	r23, Y+8	; 0x08
    197a:	89 85       	ldd	r24, Y+9	; 0x09
    197c:	9a 85       	ldd	r25, Y+10	; 0x0a
    197e:	20 e0       	ldi	r18, 0x00	; 0
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	40 e8       	ldi	r20, 0x80	; 128
    1984:	5f e3       	ldi	r21, 0x3F	; 63
    1986:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    198a:	88 23       	and	r24, r24
    198c:	2c f4       	brge	.+10     	; 0x1998 <EEPROM_Write+0xa0>
		__ticks = 1;
    198e:	81 e0       	ldi	r24, 0x01	; 1
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	9e 83       	std	Y+6, r25	; 0x06
    1994:	8d 83       	std	Y+5, r24	; 0x05
    1996:	3f c0       	rjmp	.+126    	; 0x1a16 <EEPROM_Write+0x11e>
	else if (__tmp > 65535)
    1998:	6f 81       	ldd	r22, Y+7	; 0x07
    199a:	78 85       	ldd	r23, Y+8	; 0x08
    199c:	89 85       	ldd	r24, Y+9	; 0x09
    199e:	9a 85       	ldd	r25, Y+10	; 0x0a
    19a0:	20 e0       	ldi	r18, 0x00	; 0
    19a2:	3f ef       	ldi	r19, 0xFF	; 255
    19a4:	4f e7       	ldi	r20, 0x7F	; 127
    19a6:	57 e4       	ldi	r21, 0x47	; 71
    19a8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19ac:	18 16       	cp	r1, r24
    19ae:	4c f5       	brge	.+82     	; 0x1a02 <EEPROM_Write+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    19b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    19b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    19b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    19b8:	20 e0       	ldi	r18, 0x00	; 0
    19ba:	30 e0       	ldi	r19, 0x00	; 0
    19bc:	40 e2       	ldi	r20, 0x20	; 32
    19be:	51 e4       	ldi	r21, 0x41	; 65
    19c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19c4:	dc 01       	movw	r26, r24
    19c6:	cb 01       	movw	r24, r22
    19c8:	bc 01       	movw	r22, r24
    19ca:	cd 01       	movw	r24, r26
    19cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19d0:	dc 01       	movw	r26, r24
    19d2:	cb 01       	movw	r24, r22
    19d4:	9e 83       	std	Y+6, r25	; 0x06
    19d6:	8d 83       	std	Y+5, r24	; 0x05
    19d8:	0f c0       	rjmp	.+30     	; 0x19f8 <EEPROM_Write+0x100>
    19da:	89 e1       	ldi	r24, 0x19	; 25
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	9c 83       	std	Y+4, r25	; 0x04
    19e0:	8b 83       	std	Y+3, r24	; 0x03
    19e2:	8b 81       	ldd	r24, Y+3	; 0x03
    19e4:	9c 81       	ldd	r25, Y+4	; 0x04
    19e6:	01 97       	sbiw	r24, 0x01	; 1
    19e8:	f1 f7       	brne	.-4      	; 0x19e6 <EEPROM_Write+0xee>
    19ea:	9c 83       	std	Y+4, r25	; 0x04
    19ec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19ee:	8d 81       	ldd	r24, Y+5	; 0x05
    19f0:	9e 81       	ldd	r25, Y+6	; 0x06
    19f2:	01 97       	sbiw	r24, 0x01	; 1
    19f4:	9e 83       	std	Y+6, r25	; 0x06
    19f6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19f8:	8d 81       	ldd	r24, Y+5	; 0x05
    19fa:	9e 81       	ldd	r25, Y+6	; 0x06
    19fc:	00 97       	sbiw	r24, 0x00	; 0
    19fe:	69 f7       	brne	.-38     	; 0x19da <EEPROM_Write+0xe2>
    1a00:	14 c0       	rjmp	.+40     	; 0x1a2a <EEPROM_Write+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a02:	6f 81       	ldd	r22, Y+7	; 0x07
    1a04:	78 85       	ldd	r23, Y+8	; 0x08
    1a06:	89 85       	ldd	r24, Y+9	; 0x09
    1a08:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a0e:	dc 01       	movw	r26, r24
    1a10:	cb 01       	movw	r24, r22
    1a12:	9e 83       	std	Y+6, r25	; 0x06
    1a14:	8d 83       	std	Y+5, r24	; 0x05
    1a16:	8d 81       	ldd	r24, Y+5	; 0x05
    1a18:	9e 81       	ldd	r25, Y+6	; 0x06
    1a1a:	9a 83       	std	Y+2, r25	; 0x02
    1a1c:	89 83       	std	Y+1, r24	; 0x01
    1a1e:	89 81       	ldd	r24, Y+1	; 0x01
    1a20:	9a 81       	ldd	r25, Y+2	; 0x02
    1a22:	01 97       	sbiw	r24, 0x01	; 1
    1a24:	f1 f7       	brne	.-4      	; 0x1a22 <EEPROM_Write+0x12a>
    1a26:	9a 83       	std	Y+2, r25	; 0x02
    1a28:	89 83       	std	Y+1, r24	; 0x01
		//delay for 10 ms to write in the memory
		_delay_ms(10);
	}
    1a2a:	62 96       	adiw	r28, 0x12	; 18
    1a2c:	0f b6       	in	r0, 0x3f	; 63
    1a2e:	f8 94       	cli
    1a30:	de bf       	out	0x3e, r29	; 62
    1a32:	0f be       	out	0x3f, r0	; 63
    1a34:	cd bf       	out	0x3d, r28	; 61
    1a36:	cf 91       	pop	r28
    1a38:	df 91       	pop	r29
    1a3a:	08 95       	ret

00001a3c <EEPROM_Read>:


	unsigned char EEPROM_Read(int location_Address)
	{
    1a3c:	df 93       	push	r29
    1a3e:	cf 93       	push	r28
    1a40:	00 d0       	rcall	.+0      	; 0x1a42 <EEPROM_Read+0x6>
    1a42:	00 d0       	rcall	.+0      	; 0x1a44 <EEPROM_Read+0x8>
    1a44:	cd b7       	in	r28, 0x3d	; 61
    1a46:	de b7       	in	r29, 0x3e	; 62
    1a48:	9c 83       	std	Y+4, r25	; 0x04
    1a4a:	8b 83       	std	Y+3, r24	; 0x03
		unsigned char data ;
		unsigned char local_AddressPacket=EEPROM_FIXED_ADDRESS | (0<<2) |(unsigned char)(location_Address>>8);
    1a4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a50:	89 2f       	mov	r24, r25
    1a52:	99 0f       	add	r25, r25
    1a54:	99 0b       	sbc	r25, r25
    1a56:	80 65       	ori	r24, 0x50	; 80
    1a58:	89 83       	std	Y+1, r24	; 0x01
		TWI_SendStartCondition();
    1a5a:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <TWI_SendStartCondition>
		// 7 bit slave with write to can be able to send the rest 8 bit of location address
		TWI_SendSlaveAddressWithWrite(local_AddressPacket);
    1a5e:	89 81       	ldd	r24, Y+1	; 0x01
    1a60:	88 2f       	mov	r24, r24
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <TWI_SendSlaveAddressWithWrite>
		// send the rest of 8 bits
		TWI_MasterWriteDataByte((unsigned char)location_Address);
    1a68:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6a:	88 2f       	mov	r24, r24
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <TWI_MasterWriteDataByte>
		// send repeated start
		TWI_SendRepeatedStart();
    1a72:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <TWI_SendRepeatedStart>
		// send slave add with read
		TWI_SendSlaveAddressWithRead(local_AddressPacket);
    1a76:	89 81       	ldd	r24, Y+1	; 0x01
    1a78:	88 2f       	mov	r24, r24
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <TWI_SendSlaveAddressWithRead>
		// read the send data
		TWI_MasterReadDataByte(&data);
    1a80:	ce 01       	movw	r24, r28
    1a82:	02 96       	adiw	r24, 0x02	; 2
    1a84:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <TWI_MasterReadDataByte>
		//send stop condition
		TWI_SendStopCondition();
    1a88:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <TWI_SendStopCondition>
		return data;
    1a8c:	8a 81       	ldd	r24, Y+2	; 0x02
	}
    1a8e:	0f 90       	pop	r0
    1a90:	0f 90       	pop	r0
    1a92:	0f 90       	pop	r0
    1a94:	0f 90       	pop	r0
    1a96:	cf 91       	pop	r28
    1a98:	df 91       	pop	r29
    1a9a:	08 95       	ret

00001a9c <TWI_voidInitMaster>:
 *  Created on: Jul 8, 2023
 *      Author: batma
 */
#include"i2c.h"
	void TWI_voidInitMaster(unsigned char Copy_Address)
	{
    1a9c:	df 93       	push	r29
    1a9e:	cf 93       	push	r28
    1aa0:	0f 92       	push	r0
    1aa2:	cd b7       	in	r28, 0x3d	; 61
    1aa4:	de b7       	in	r29, 0x3e	; 62
    1aa6:	89 83       	std	Y+1, r24	; 0x01
		/*Enable ACKnowledge bit */
		Set_Bit(TWCR_REG,TWCR_TWEA);
    1aa8:	a6 e5       	ldi	r26, 0x56	; 86
    1aaa:	b0 e0       	ldi	r27, 0x00	; 0
    1aac:	e6 e5       	ldi	r30, 0x56	; 86
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	80 81       	ld	r24, Z
    1ab2:	80 64       	ori	r24, 0x40	; 64
    1ab4:	8c 93       	st	X, r24

		/* assume the speed = 400 ,8MHZ freq */
		/* by sub in the equation : the TWBR=2,TWPS=0  */
		/*we made this to generate clk by master*/
		TWBR_REG=2;
    1ab6:	e0 e2       	ldi	r30, 0x20	; 32
    1ab8:	f0 e0       	ldi	r31, 0x00	; 0
    1aba:	82 e0       	ldi	r24, 0x02	; 2
    1abc:	80 83       	st	Z, r24

		/* Prescaler bits: 2bit in TWPS*/
		Clear_Bit(TWSR_REG,TWSR_TWPS0);
    1abe:	a1 e2       	ldi	r26, 0x21	; 33
    1ac0:	b0 e0       	ldi	r27, 0x00	; 0
    1ac2:	e1 e2       	ldi	r30, 0x21	; 33
    1ac4:	f0 e0       	ldi	r31, 0x00	; 0
    1ac6:	80 81       	ld	r24, Z
    1ac8:	8e 7f       	andi	r24, 0xFE	; 254
    1aca:	8c 93       	st	X, r24
		Clear_Bit(TWSR_REG,TWSR_TWPS1);
    1acc:	a1 e2       	ldi	r26, 0x21	; 33
    1ace:	b0 e0       	ldi	r27, 0x00	; 0
    1ad0:	e1 e2       	ldi	r30, 0x21	; 33
    1ad2:	f0 e0       	ldi	r31, 0x00	; 0
    1ad4:	80 81       	ld	r24, Z
    1ad6:	8d 7f       	andi	r24, 0xFD	; 253
    1ad8:	8c 93       	st	X, r24

		/*to make any change or make any step we need to clear flag*/
		Clear_Bit(TWCR_REG,TWCR_TWINT);
    1ada:	a6 e5       	ldi	r26, 0x56	; 86
    1adc:	b0 e0       	ldi	r27, 0x00	; 0
    1ade:	e6 e5       	ldi	r30, 0x56	; 86
    1ae0:	f0 e0       	ldi	r31, 0x00	; 0
    1ae2:	80 81       	ld	r24, Z
    1ae4:	8f 77       	andi	r24, 0x7F	; 127
    1ae6:	8c 93       	st	X, r24

		/*we need to check if the master has address or not*/
		if(Copy_Address!=0)
    1ae8:	89 81       	ldd	r24, Y+1	; 0x01
    1aea:	88 23       	and	r24, r24
    1aec:	29 f0       	breq	.+10     	; 0x1af8 <TWI_voidInitMaster+0x5c>
		{
			/*Set the Master address*/
			TWAR_REG=Copy_Address<<1;
    1aee:	e2 e2       	ldi	r30, 0x22	; 34
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	89 81       	ldd	r24, Y+1	; 0x01
    1af4:	88 0f       	add	r24, r24
    1af6:	80 83       	st	Z, r24
		else
		{
			//do nothing
		}
		/*Enable TWI*/
		Set_Bit(TWCR_REG,TWCR_TWEN);
    1af8:	a6 e5       	ldi	r26, 0x56	; 86
    1afa:	b0 e0       	ldi	r27, 0x00	; 0
    1afc:	e6 e5       	ldi	r30, 0x56	; 86
    1afe:	f0 e0       	ldi	r31, 0x00	; 0
    1b00:	80 81       	ld	r24, Z
    1b02:	84 60       	ori	r24, 0x04	; 4
    1b04:	8c 93       	st	X, r24
	}
    1b06:	0f 90       	pop	r0
    1b08:	cf 91       	pop	r28
    1b0a:	df 91       	pop	r29
    1b0c:	08 95       	ret

00001b0e <TWI_voidInitSlave>:

	void TWI_voidInitSlave(unsigned char Copy_address)
	{
    1b0e:	df 93       	push	r29
    1b10:	cf 93       	push	r28
    1b12:	0f 92       	push	r0
    1b14:	cd b7       	in	r28, 0x3d	; 61
    1b16:	de b7       	in	r29, 0x3e	; 62
    1b18:	89 83       	std	Y+1, r24	; 0x01
		/*Set the slave address*/
		TWAR_REG=Copy_address<<1;
    1b1a:	e2 e2       	ldi	r30, 0x22	; 34
    1b1c:	f0 e0       	ldi	r31, 0x00	; 0
    1b1e:	89 81       	ldd	r24, Y+1	; 0x01
    1b20:	88 0f       	add	r24, r24
    1b22:	80 83       	st	Z, r24

		/*Enable ACKnowledge bit */
		Set_Bit(TWCR_REG,TWCR_TWEA);
    1b24:	a6 e5       	ldi	r26, 0x56	; 86
    1b26:	b0 e0       	ldi	r27, 0x00	; 0
    1b28:	e6 e5       	ldi	r30, 0x56	; 86
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	80 81       	ld	r24, Z
    1b2e:	80 64       	ori	r24, 0x40	; 64
    1b30:	8c 93       	st	X, r24


		/*Enable TWI*/
		Set_Bit(TWCR_REG,TWCR_TWEN);
    1b32:	a6 e5       	ldi	r26, 0x56	; 86
    1b34:	b0 e0       	ldi	r27, 0x00	; 0
    1b36:	e6 e5       	ldi	r30, 0x56	; 86
    1b38:	f0 e0       	ldi	r31, 0x00	; 0
    1b3a:	80 81       	ld	r24, Z
    1b3c:	84 60       	ori	r24, 0x04	; 4
    1b3e:	8c 93       	st	X, r24
	}
    1b40:	0f 90       	pop	r0
    1b42:	cf 91       	pop	r28
    1b44:	df 91       	pop	r29
    1b46:	08 95       	ret

00001b48 <TWI_SendStartCondition>:

	TWI_ErrStatus TWI_SendStartCondition()
	{
    1b48:	df 93       	push	r29
    1b4a:	cf 93       	push	r28
    1b4c:	0f 92       	push	r0
    1b4e:	cd b7       	in	r28, 0x3d	; 61
    1b50:	de b7       	in	r29, 0x3e	; 62
		TWI_ErrStatus Local_Error=NoError;
    1b52:	19 82       	std	Y+1, r1	; 0x01

		/*Send start condition*/
		Set_Bit(TWCR_REG,TWCR_TWSTA);
    1b54:	a6 e5       	ldi	r26, 0x56	; 86
    1b56:	b0 e0       	ldi	r27, 0x00	; 0
    1b58:	e6 e5       	ldi	r30, 0x56	; 86
    1b5a:	f0 e0       	ldi	r31, 0x00	; 0
    1b5c:	80 81       	ld	r24, Z
    1b5e:	80 62       	ori	r24, 0x20	; 32
    1b60:	8c 93       	st	X, r24

		/*to make any change or make any step we need to clear flag*/
		/*Clear the interrupt flag to start the previous operation*/
		Set_Bit(TWCR_REG,TWCR_TWINT);
    1b62:	a6 e5       	ldi	r26, 0x56	; 86
    1b64:	b0 e0       	ldi	r27, 0x00	; 0
    1b66:	e6 e5       	ldi	r30, 0x56	; 86
    1b68:	f0 e0       	ldi	r31, 0x00	; 0
    1b6a:	80 81       	ld	r24, Z
    1b6c:	80 68       	ori	r24, 0x80	; 128
    1b6e:	8c 93       	st	X, r24

		/*wait until the operation finishes and the flag is raised*/
		while((Get_Bit(TWCR_REG,TWCR_TWINT))==0);
    1b70:	e6 e5       	ldi	r30, 0x56	; 86
    1b72:	f0 e0       	ldi	r31, 0x00	; 0
    1b74:	80 81       	ld	r24, Z
    1b76:	88 23       	and	r24, r24
    1b78:	dc f7       	brge	.-10     	; 0x1b70 <TWI_SendStartCondition+0x28>

		/*Check the operation status*/
		// we need to clear the last 3 bit (3 LSB bits) so we use 0xF8
		if((TWSR_REG & 0xF8)!=START_ACK)
    1b7a:	e1 e2       	ldi	r30, 0x21	; 33
    1b7c:	f0 e0       	ldi	r31, 0x00	; 0
    1b7e:	80 81       	ld	r24, Z
    1b80:	88 2f       	mov	r24, r24
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	88 7f       	andi	r24, 0xF8	; 248
    1b86:	90 70       	andi	r25, 0x00	; 0
    1b88:	88 30       	cpi	r24, 0x08	; 8
    1b8a:	91 05       	cpc	r25, r1
    1b8c:	11 f0       	breq	.+4      	; 0x1b92 <TWI_SendStartCondition+0x4a>
		{
			Local_Error=StartconditionERR;
    1b8e:	81 e0       	ldi	r24, 0x01	; 1
    1b90:	89 83       	std	Y+1, r24	; 0x01
		}
		else
		{
			//do nothing
		}
		return Local_Error;
    1b92:	89 81       	ldd	r24, Y+1	; 0x01

	}
    1b94:	0f 90       	pop	r0
    1b96:	cf 91       	pop	r28
    1b98:	df 91       	pop	r29
    1b9a:	08 95       	ret

00001b9c <TWI_SendRepeatedStart>:

	TWI_ErrStatus TWI_SendRepeatedStart()
	{
    1b9c:	df 93       	push	r29
    1b9e:	cf 93       	push	r28
    1ba0:	0f 92       	push	r0
    1ba2:	cd b7       	in	r28, 0x3d	; 61
    1ba4:	de b7       	in	r29, 0x3e	; 62
		TWI_ErrStatus Local_Error = NoError;
    1ba6:	19 82       	std	Y+1, r1	; 0x01

		/* enable start condition*/
		Set_Bit(TWCR_REG,TWCR_TWSTA);
    1ba8:	a6 e5       	ldi	r26, 0x56	; 86
    1baa:	b0 e0       	ldi	r27, 0x00	; 0
    1bac:	e6 e5       	ldi	r30, 0x56	; 86
    1bae:	f0 e0       	ldi	r31, 0x00	; 0
    1bb0:	80 81       	ld	r24, Z
    1bb2:	80 62       	ori	r24, 0x20	; 32
    1bb4:	8c 93       	st	X, r24

		/*clear the interrupt flag*/
		Set_Bit(TWCR_REG,TWCR_TWINT);
    1bb6:	a6 e5       	ldi	r26, 0x56	; 86
    1bb8:	b0 e0       	ldi	r27, 0x00	; 0
    1bba:	e6 e5       	ldi	r30, 0x56	; 86
    1bbc:	f0 e0       	ldi	r31, 0x00	; 0
    1bbe:	80 81       	ld	r24, Z
    1bc0:	80 68       	ori	r24, 0x80	; 128
    1bc2:	8c 93       	st	X, r24

		while((Get_Bit(TWCR_REG,TWCR_TWINT))==0);
    1bc4:	e6 e5       	ldi	r30, 0x56	; 86
    1bc6:	f0 e0       	ldi	r31, 0x00	; 0
    1bc8:	80 81       	ld	r24, Z
    1bca:	88 23       	and	r24, r24
    1bcc:	dc f7       	brge	.-10     	; 0x1bc4 <TWI_SendRepeatedStart+0x28>

		/*Check the operation status*/
		// we need to clear the last 3 bit (3 LSB bits) so we use 0xF8
		if((TWSR_REG & 0xF8)!= REP_START_ACK)
    1bce:	e1 e2       	ldi	r30, 0x21	; 33
    1bd0:	f0 e0       	ldi	r31, 0x00	; 0
    1bd2:	80 81       	ld	r24, Z
    1bd4:	88 2f       	mov	r24, r24
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	88 7f       	andi	r24, 0xF8	; 248
    1bda:	90 70       	andi	r25, 0x00	; 0
    1bdc:	80 31       	cpi	r24, 0x10	; 16
    1bde:	91 05       	cpc	r25, r1
    1be0:	11 f0       	breq	.+4      	; 0x1be6 <TWI_SendRepeatedStart+0x4a>
		{
			Local_Error=RepeatedStartError;
    1be2:	82 e0       	ldi	r24, 0x02	; 2
    1be4:	89 83       	std	Y+1, r24	; 0x01
		}
		else
		{
			// do nothing
		}
		return Local_Error;
    1be6:	89 81       	ldd	r24, Y+1	; 0x01
	}
    1be8:	0f 90       	pop	r0
    1bea:	cf 91       	pop	r28
    1bec:	df 91       	pop	r29
    1bee:	08 95       	ret

00001bf0 <TWI_SendSlaveAddressWithWrite>:

	TWI_ErrStatus TWI_SendSlaveAddressWithWrite(unsigned char copy_Slaveaddress)
	{
    1bf0:	df 93       	push	r29
    1bf2:	cf 93       	push	r28
    1bf4:	00 d0       	rcall	.+0      	; 0x1bf6 <TWI_SendSlaveAddressWithWrite+0x6>
    1bf6:	cd b7       	in	r28, 0x3d	; 61
    1bf8:	de b7       	in	r29, 0x3e	; 62
    1bfa:	8a 83       	std	Y+2, r24	; 0x02
		TWI_ErrStatus Local_Error=NoError;
    1bfc:	19 82       	std	Y+1, r1	; 0x01

		/*set the address slave */
		TWDR_REG=copy_Slaveaddress<<1;
    1bfe:	e3 e2       	ldi	r30, 0x23	; 35
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	8a 81       	ldd	r24, Y+2	; 0x02
    1c04:	88 0f       	add	r24, r24
    1c06:	80 83       	st	Z, r24

		/* Enable the write bit*/
		Clear_Bit(TWDR_REG,0);
    1c08:	a3 e2       	ldi	r26, 0x23	; 35
    1c0a:	b0 e0       	ldi	r27, 0x00	; 0
    1c0c:	e3 e2       	ldi	r30, 0x23	; 35
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	80 81       	ld	r24, Z
    1c12:	8e 7f       	andi	r24, 0xFE	; 254
    1c14:	8c 93       	st	X, r24

		/*we must clear start condition by software after send the start condition */
		Clear_Bit(TWCR_REG,TWCR_TWSTA);
    1c16:	a6 e5       	ldi	r26, 0x56	; 86
    1c18:	b0 e0       	ldi	r27, 0x00	; 0
    1c1a:	e6 e5       	ldi	r30, 0x56	; 86
    1c1c:	f0 e0       	ldi	r31, 0x00	; 0
    1c1e:	80 81       	ld	r24, Z
    1c20:	8f 7d       	andi	r24, 0xDF	; 223
    1c22:	8c 93       	st	X, r24

		/*clear the interrupt flag*/
		Set_Bit(TWCR_REG,TWCR_TWINT);
    1c24:	a6 e5       	ldi	r26, 0x56	; 86
    1c26:	b0 e0       	ldi	r27, 0x00	; 0
    1c28:	e6 e5       	ldi	r30, 0x56	; 86
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	80 81       	ld	r24, Z
    1c2e:	80 68       	ori	r24, 0x80	; 128
    1c30:	8c 93       	st	X, r24

		/*wait until the flag rising up*/
		while((Get_Bit(TWCR_REG,TWCR_TWINT))==0);
    1c32:	e6 e5       	ldi	r30, 0x56	; 86
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	80 81       	ld	r24, Z
    1c38:	88 23       	and	r24, r24
    1c3a:	dc f7       	brge	.-10     	; 0x1c32 <TWI_SendSlaveAddressWithWrite+0x42>

		/* check the condition */
		if((TWSR_REG & 0xF8)!=Slave_ADD_AND_WR_ACK)
    1c3c:	e1 e2       	ldi	r30, 0x21	; 33
    1c3e:	f0 e0       	ldi	r31, 0x00	; 0
    1c40:	80 81       	ld	r24, Z
    1c42:	88 2f       	mov	r24, r24
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	88 7f       	andi	r24, 0xF8	; 248
    1c48:	90 70       	andi	r25, 0x00	; 0
    1c4a:	88 31       	cpi	r24, 0x18	; 24
    1c4c:	91 05       	cpc	r25, r1
    1c4e:	11 f0       	breq	.+4      	; 0x1c54 <TWI_SendSlaveAddressWithWrite+0x64>
		{
			Local_Error=SlaveAddressWithWriteErr;
    1c50:	83 e0       	ldi	r24, 0x03	; 3
    1c52:	89 83       	std	Y+1, r24	; 0x01
		}
		else
		{
			//do nothing
		}
		return Local_Error;
    1c54:	89 81       	ldd	r24, Y+1	; 0x01
	}
    1c56:	0f 90       	pop	r0
    1c58:	0f 90       	pop	r0
    1c5a:	cf 91       	pop	r28
    1c5c:	df 91       	pop	r29
    1c5e:	08 95       	ret

00001c60 <TWI_SendSlaveAddressWithRead>:

	TWI_ErrStatus TWI_SendSlaveAddressWithRead(unsigned char copy_Slaveaddress)
	{
    1c60:	df 93       	push	r29
    1c62:	cf 93       	push	r28
    1c64:	00 d0       	rcall	.+0      	; 0x1c66 <TWI_SendSlaveAddressWithRead+0x6>
    1c66:	cd b7       	in	r28, 0x3d	; 61
    1c68:	de b7       	in	r29, 0x3e	; 62
    1c6a:	8a 83       	std	Y+2, r24	; 0x02
		TWI_ErrStatus Local_Error=NoError;
    1c6c:	19 82       	std	Y+1, r1	; 0x01

		/*send the 7bit slave address to the bus*/
		TWDR_REG=copy_Slaveaddress<<1;
    1c6e:	e3 e2       	ldi	r30, 0x23	; 35
    1c70:	f0 e0       	ldi	r31, 0x00	; 0
    1c72:	8a 81       	ldd	r24, Y+2	; 0x02
    1c74:	88 0f       	add	r24, r24
    1c76:	80 83       	st	Z, r24

		/*set the read request in the LSB in the data register*/
		Set_Bit(TWDR_REG,0);
    1c78:	a3 e2       	ldi	r26, 0x23	; 35
    1c7a:	b0 e0       	ldi	r27, 0x00	; 0
    1c7c:	e3 e2       	ldi	r30, 0x23	; 35
    1c7e:	f0 e0       	ldi	r31, 0x00	; 0
    1c80:	80 81       	ld	r24, Z
    1c82:	81 60       	ori	r24, 0x01	; 1
    1c84:	8c 93       	st	X, r24

		/*we must clear start condition by software after send the start condition */
		Clear_Bit(TWCR_REG,TWCR_TWSTA);
    1c86:	a6 e5       	ldi	r26, 0x56	; 86
    1c88:	b0 e0       	ldi	r27, 0x00	; 0
    1c8a:	e6 e5       	ldi	r30, 0x56	; 86
    1c8c:	f0 e0       	ldi	r31, 0x00	; 0
    1c8e:	80 81       	ld	r24, Z
    1c90:	8f 7d       	andi	r24, 0xDF	; 223
    1c92:	8c 93       	st	X, r24

		/*to make any change or make any step we need to clear flag*/
		Set_Bit(TWCR_REG,TWCR_TWINT);
    1c94:	a6 e5       	ldi	r26, 0x56	; 86
    1c96:	b0 e0       	ldi	r27, 0x00	; 0
    1c98:	e6 e5       	ldi	r30, 0x56	; 86
    1c9a:	f0 e0       	ldi	r31, 0x00	; 0
    1c9c:	80 81       	ld	r24, Z
    1c9e:	80 68       	ori	r24, 0x80	; 128
    1ca0:	8c 93       	st	X, r24

		/*wait until the operation finishes and the flag is raised*/
		while((Get_Bit(TWCR_REG,TWCR_TWINT))==0);
    1ca2:	e6 e5       	ldi	r30, 0x56	; 86
    1ca4:	f0 e0       	ldi	r31, 0x00	; 0
    1ca6:	80 81       	ld	r24, Z
    1ca8:	88 23       	and	r24, r24
    1caa:	dc f7       	brge	.-10     	; 0x1ca2 <TWI_SendSlaveAddressWithRead+0x42>

		if((TWSR_REG & 0xF8)!=Slave_ADD_AND_RD_ACK)
    1cac:	e1 e2       	ldi	r30, 0x21	; 33
    1cae:	f0 e0       	ldi	r31, 0x00	; 0
    1cb0:	80 81       	ld	r24, Z
    1cb2:	88 2f       	mov	r24, r24
    1cb4:	90 e0       	ldi	r25, 0x00	; 0
    1cb6:	88 7f       	andi	r24, 0xF8	; 248
    1cb8:	90 70       	andi	r25, 0x00	; 0
    1cba:	80 34       	cpi	r24, 0x40	; 64
    1cbc:	91 05       	cpc	r25, r1
    1cbe:	11 f0       	breq	.+4      	; 0x1cc4 <TWI_SendSlaveAddressWithRead+0x64>
		{
			Local_Error= SlaveAddresswithReadErr;
    1cc0:	84 e0       	ldi	r24, 0x04	; 4
    1cc2:	89 83       	std	Y+1, r24	; 0x01
		}
		else
		{
			//do nothing
		}
		return Local_Error;
    1cc4:	89 81       	ldd	r24, Y+1	; 0x01
	}
    1cc6:	0f 90       	pop	r0
    1cc8:	0f 90       	pop	r0
    1cca:	cf 91       	pop	r28
    1ccc:	df 91       	pop	r29
    1cce:	08 95       	ret

00001cd0 <TWI_MasterWriteDataByte>:

	TWI_ErrStatus TWI_MasterWriteDataByte(unsigned char copy_DataByte)
	{
    1cd0:	df 93       	push	r29
    1cd2:	cf 93       	push	r28
    1cd4:	00 d0       	rcall	.+0      	; 0x1cd6 <TWI_MasterWriteDataByte+0x6>
    1cd6:	cd b7       	in	r28, 0x3d	; 61
    1cd8:	de b7       	in	r29, 0x3e	; 62
    1cda:	8a 83       	std	Y+2, r24	; 0x02
		TWI_ErrStatus Local_Error = NoError;
    1cdc:	19 82       	std	Y+1, r1	; 0x01

		/*send the data to the bus */
		TWDR_REG = copy_DataByte ;
    1cde:	e3 e2       	ldi	r30, 0x23	; 35
    1ce0:	f0 e0       	ldi	r31, 0x00	; 0
    1ce2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce4:	80 83       	st	Z, r24

		/* clear the interrupt flag*/
		Set_Bit(TWCR_REG,TWCR_TWINT);
    1ce6:	a6 e5       	ldi	r26, 0x56	; 86
    1ce8:	b0 e0       	ldi	r27, 0x00	; 0
    1cea:	e6 e5       	ldi	r30, 0x56	; 86
    1cec:	f0 e0       	ldi	r31, 0x00	; 0
    1cee:	80 81       	ld	r24, Z
    1cf0:	80 68       	ori	r24, 0x80	; 128
    1cf2:	8c 93       	st	X, r24

		/*wait until the operation finishes and the flag is raised*/
		while((Get_Bit(TWCR_REG,TWCR_TWINT))==0);
    1cf4:	e6 e5       	ldi	r30, 0x56	; 86
    1cf6:	f0 e0       	ldi	r31, 0x00	; 0
    1cf8:	80 81       	ld	r24, Z
    1cfa:	88 23       	and	r24, r24
    1cfc:	dc f7       	brge	.-10     	; 0x1cf4 <TWI_MasterWriteDataByte+0x24>

		/*Check the operation status*/
		if((TWSR_REG & 0xF8) !=MSTR_WR_BYTE_ACK  )
    1cfe:	e1 e2       	ldi	r30, 0x21	; 33
    1d00:	f0 e0       	ldi	r31, 0x00	; 0
    1d02:	80 81       	ld	r24, Z
    1d04:	88 2f       	mov	r24, r24
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	88 7f       	andi	r24, 0xF8	; 248
    1d0a:	90 70       	andi	r25, 0x00	; 0
    1d0c:	88 32       	cpi	r24, 0x28	; 40
    1d0e:	91 05       	cpc	r25, r1
    1d10:	11 f0       	breq	.+4      	; 0x1d16 <TWI_MasterWriteDataByte+0x46>
		{
			Local_Error = MasterWriteByteErr ;
    1d12:	85 e0       	ldi	r24, 0x05	; 5
    1d14:	89 83       	std	Y+1, r24	; 0x01
		}
		else
		{
			/*Do nothing*/
		}
		return Local_Error;
    1d16:	89 81       	ldd	r24, Y+1	; 0x01
	}
    1d18:	0f 90       	pop	r0
    1d1a:	0f 90       	pop	r0
    1d1c:	cf 91       	pop	r28
    1d1e:	df 91       	pop	r29
    1d20:	08 95       	ret

00001d22 <TWI_MasterReadDataByte>:

	TWI_ErrStatus TWI_MasterReadDataByte(unsigned char *copy_DataByte)
	{
    1d22:	df 93       	push	r29
    1d24:	cf 93       	push	r28
    1d26:	00 d0       	rcall	.+0      	; 0x1d28 <TWI_MasterReadDataByte+0x6>
    1d28:	0f 92       	push	r0
    1d2a:	cd b7       	in	r28, 0x3d	; 61
    1d2c:	de b7       	in	r29, 0x3e	; 62
    1d2e:	9b 83       	std	Y+3, r25	; 0x03
    1d30:	8a 83       	std	Y+2, r24	; 0x02
		TWI_ErrStatus Local_Error = NoError;
    1d32:	19 82       	std	Y+1, r1	; 0x01

		/*we need to imagine the send scenario the master send start
		 * then address with read and ack then the flag will rise so
		 * to the address send the data we need to clear the flag first
		 * to get the CLK work again and the slave can send the data */
		Set_Bit(TWCR_REG,TWCR_TWINT);
    1d34:	a6 e5       	ldi	r26, 0x56	; 86
    1d36:	b0 e0       	ldi	r27, 0x00	; 0
    1d38:	e6 e5       	ldi	r30, 0x56	; 86
    1d3a:	f0 e0       	ldi	r31, 0x00	; 0
    1d3c:	80 81       	ld	r24, Z
    1d3e:	80 68       	ori	r24, 0x80	; 128
    1d40:	8c 93       	st	X, r24

		/*wait until the operation finishes and the flag is raised*/
		while((Get_Bit(TWCR_REG,TWCR_TWINT))==0);
    1d42:	e6 e5       	ldi	r30, 0x56	; 86
    1d44:	f0 e0       	ldi	r31, 0x00	; 0
    1d46:	80 81       	ld	r24, Z
    1d48:	88 23       	and	r24, r24
    1d4a:	dc f7       	brge	.-10     	; 0x1d42 <TWI_MasterReadDataByte+0x20>

		/*Check the operation status*/
		if((TWSR_REG & 0xF8)!=MSTR_RRD_BYTE_WITH_ACK)
    1d4c:	e1 e2       	ldi	r30, 0x21	; 33
    1d4e:	f0 e0       	ldi	r31, 0x00	; 0
    1d50:	80 81       	ld	r24, Z
    1d52:	88 2f       	mov	r24, r24
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	88 7f       	andi	r24, 0xF8	; 248
    1d58:	90 70       	andi	r25, 0x00	; 0
    1d5a:	80 35       	cpi	r24, 0x50	; 80
    1d5c:	91 05       	cpc	r25, r1
    1d5e:	19 f0       	breq	.+6      	; 0x1d66 <TWI_MasterReadDataByte+0x44>
		{
			Local_Error=MasterReadByteErr;
    1d60:	86 e0       	ldi	r24, 0x06	; 6
    1d62:	89 83       	std	Y+1, r24	; 0x01
    1d64:	06 c0       	rjmp	.+12     	; 0x1d72 <TWI_MasterReadDataByte+0x50>
		}
		else
		{
			*copy_DataByte = TWDR_REG;
    1d66:	e3 e2       	ldi	r30, 0x23	; 35
    1d68:	f0 e0       	ldi	r31, 0x00	; 0
    1d6a:	80 81       	ld	r24, Z
    1d6c:	ea 81       	ldd	r30, Y+2	; 0x02
    1d6e:	fb 81       	ldd	r31, Y+3	; 0x03
    1d70:	80 83       	st	Z, r24
		}
		return Local_Error;
    1d72:	89 81       	ldd	r24, Y+1	; 0x01
	}
    1d74:	0f 90       	pop	r0
    1d76:	0f 90       	pop	r0
    1d78:	0f 90       	pop	r0
    1d7a:	cf 91       	pop	r28
    1d7c:	df 91       	pop	r29
    1d7e:	08 95       	ret

00001d80 <TWI_SendStopCondition>:

	void TWI_SendStopCondition(void)
	{
    1d80:	df 93       	push	r29
    1d82:	cf 93       	push	r28
    1d84:	cd b7       	in	r28, 0x3d	; 61
    1d86:	de b7       	in	r29, 0x3e	; 62
		/*Enable the stop condition*/
		Set_Bit(TWCR_REG,TWCR_TWSTO);
    1d88:	a6 e5       	ldi	r26, 0x56	; 86
    1d8a:	b0 e0       	ldi	r27, 0x00	; 0
    1d8c:	e6 e5       	ldi	r30, 0x56	; 86
    1d8e:	f0 e0       	ldi	r31, 0x00	; 0
    1d90:	80 81       	ld	r24, Z
    1d92:	80 61       	ori	r24, 0x10	; 16
    1d94:	8c 93       	st	X, r24
		/*Clear the interrupt flag to start the previous operation*/
		Set_Bit(TWCR_REG,TWCR_TWINT);
    1d96:	a6 e5       	ldi	r26, 0x56	; 86
    1d98:	b0 e0       	ldi	r27, 0x00	; 0
    1d9a:	e6 e5       	ldi	r30, 0x56	; 86
    1d9c:	f0 e0       	ldi	r31, 0x00	; 0
    1d9e:	80 81       	ld	r24, Z
    1da0:	80 68       	ori	r24, 0x80	; 128
    1da2:	8c 93       	st	X, r24
	}
    1da4:	cf 91       	pop	r28
    1da6:	df 91       	pop	r29
    1da8:	08 95       	ret

00001daa <main>:


unsigned char access = '0';
unsigned char mode = '0';

void main(){
    1daa:	df 93       	push	r29
    1dac:	cf 93       	push	r28
    1dae:	cd b7       	in	r28, 0x3d	; 61
    1db0:	de b7       	in	r29, 0x3e	; 62
    1db2:	2f 97       	sbiw	r28, 0x0f	; 15
    1db4:	0f b6       	in	r0, 0x3f	; 63
    1db6:	f8 94       	cli
    1db8:	de bf       	out	0x3e, r29	; 62
    1dba:	0f be       	out	0x3f, r0	; 63
    1dbc:	cd bf       	out	0x3d, r28	; 61
//
//        	LCD_displayCharacter(data);
//        }


		TWI_voidInitMaster(0);
    1dbe:	80 e0       	ldi	r24, 0x00	; 0
    1dc0:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <TWI_voidInitMaster>
		EEPROM_Write(104,'w');
    1dc4:	88 e6       	ldi	r24, 0x68	; 104
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	67 e7       	ldi	r22, 0x77	; 119
    1dca:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <EEPROM_Write>

		LCD_init();
    1dce:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <LCD_init>
    1dd2:	80 e0       	ldi	r24, 0x00	; 0
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	a8 e4       	ldi	r26, 0x48	; 72
    1dd8:	b3 e4       	ldi	r27, 0x43	; 67
    1dda:	8b 87       	std	Y+11, r24	; 0x0b
    1ddc:	9c 87       	std	Y+12, r25	; 0x0c
    1dde:	ad 87       	std	Y+13, r26	; 0x0d
    1de0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1de2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1de4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1de6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1de8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dea:	20 e0       	ldi	r18, 0x00	; 0
    1dec:	30 e0       	ldi	r19, 0x00	; 0
    1dee:	4a e7       	ldi	r20, 0x7A	; 122
    1df0:	53 e4       	ldi	r21, 0x43	; 67
    1df2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1df6:	dc 01       	movw	r26, r24
    1df8:	cb 01       	movw	r24, r22
    1dfa:	8f 83       	std	Y+7, r24	; 0x07
    1dfc:	98 87       	std	Y+8, r25	; 0x08
    1dfe:	a9 87       	std	Y+9, r26	; 0x09
    1e00:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e02:	6f 81       	ldd	r22, Y+7	; 0x07
    1e04:	78 85       	ldd	r23, Y+8	; 0x08
    1e06:	89 85       	ldd	r24, Y+9	; 0x09
    1e08:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e0a:	20 e0       	ldi	r18, 0x00	; 0
    1e0c:	30 e0       	ldi	r19, 0x00	; 0
    1e0e:	40 e8       	ldi	r20, 0x80	; 128
    1e10:	5f e3       	ldi	r21, 0x3F	; 63
    1e12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e16:	88 23       	and	r24, r24
    1e18:	2c f4       	brge	.+10     	; 0x1e24 <main+0x7a>
		__ticks = 1;
    1e1a:	81 e0       	ldi	r24, 0x01	; 1
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	9e 83       	std	Y+6, r25	; 0x06
    1e20:	8d 83       	std	Y+5, r24	; 0x05
    1e22:	3f c0       	rjmp	.+126    	; 0x1ea2 <main+0xf8>
	else if (__tmp > 65535)
    1e24:	6f 81       	ldd	r22, Y+7	; 0x07
    1e26:	78 85       	ldd	r23, Y+8	; 0x08
    1e28:	89 85       	ldd	r24, Y+9	; 0x09
    1e2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e2c:	20 e0       	ldi	r18, 0x00	; 0
    1e2e:	3f ef       	ldi	r19, 0xFF	; 255
    1e30:	4f e7       	ldi	r20, 0x7F	; 127
    1e32:	57 e4       	ldi	r21, 0x47	; 71
    1e34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e38:	18 16       	cp	r1, r24
    1e3a:	4c f5       	brge	.+82     	; 0x1e8e <main+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e40:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e42:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e44:	20 e0       	ldi	r18, 0x00	; 0
    1e46:	30 e0       	ldi	r19, 0x00	; 0
    1e48:	40 e2       	ldi	r20, 0x20	; 32
    1e4a:	51 e4       	ldi	r21, 0x41	; 65
    1e4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e50:	dc 01       	movw	r26, r24
    1e52:	cb 01       	movw	r24, r22
    1e54:	bc 01       	movw	r22, r24
    1e56:	cd 01       	movw	r24, r26
    1e58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e5c:	dc 01       	movw	r26, r24
    1e5e:	cb 01       	movw	r24, r22
    1e60:	9e 83       	std	Y+6, r25	; 0x06
    1e62:	8d 83       	std	Y+5, r24	; 0x05
    1e64:	0f c0       	rjmp	.+30     	; 0x1e84 <main+0xda>
    1e66:	89 e1       	ldi	r24, 0x19	; 25
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	9c 83       	std	Y+4, r25	; 0x04
    1e6c:	8b 83       	std	Y+3, r24	; 0x03
    1e6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e70:	9c 81       	ldd	r25, Y+4	; 0x04
    1e72:	01 97       	sbiw	r24, 0x01	; 1
    1e74:	f1 f7       	brne	.-4      	; 0x1e72 <main+0xc8>
    1e76:	9c 83       	std	Y+4, r25	; 0x04
    1e78:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e7c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e7e:	01 97       	sbiw	r24, 0x01	; 1
    1e80:	9e 83       	std	Y+6, r25	; 0x06
    1e82:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e84:	8d 81       	ldd	r24, Y+5	; 0x05
    1e86:	9e 81       	ldd	r25, Y+6	; 0x06
    1e88:	00 97       	sbiw	r24, 0x00	; 0
    1e8a:	69 f7       	brne	.-38     	; 0x1e66 <main+0xbc>
    1e8c:	14 c0       	rjmp	.+40     	; 0x1eb6 <main+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e8e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e90:	78 85       	ldd	r23, Y+8	; 0x08
    1e92:	89 85       	ldd	r24, Y+9	; 0x09
    1e94:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e9a:	dc 01       	movw	r26, r24
    1e9c:	cb 01       	movw	r24, r22
    1e9e:	9e 83       	std	Y+6, r25	; 0x06
    1ea0:	8d 83       	std	Y+5, r24	; 0x05
    1ea2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ea4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ea6:	9a 83       	std	Y+2, r25	; 0x02
    1ea8:	89 83       	std	Y+1, r24	; 0x01
    1eaa:	89 81       	ldd	r24, Y+1	; 0x01
    1eac:	9a 81       	ldd	r25, Y+2	; 0x02
    1eae:	01 97       	sbiw	r24, 0x01	; 1
    1eb0:	f1 f7       	brne	.-4      	; 0x1eae <main+0x104>
    1eb2:	9a 83       	std	Y+2, r25	; 0x02
    1eb4:	89 83       	std	Y+1, r24	; 0x01

		_delay_ms(200);

		SPI_initMaster();
    1eb6:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <SPI_initMaster>

		LCD_displayString("for admin mode 1");
    1eba:	80 e6       	ldi	r24, 0x60	; 96
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_displayString>
		LCD_goToRowColumn(1,0);
    1ec2:	81 e0       	ldi	r24, 0x01	; 1
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	60 e0       	ldi	r22, 0x00	; 0
    1ec8:	70 e0       	ldi	r23, 0x00	; 0
    1eca:	0e 94 98 0a 	call	0x1530	; 0x1530 <LCD_goToRowColumn>
		LCD_displayString("for user mode 2");
    1ece:	81 e7       	ldi	r24, 0x71	; 113
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_displayString>
		if(access == '0'){
    1ed6:	80 91 b2 00 	lds	r24, 0x00B2
    1eda:	80 33       	cpi	r24, 0x30	; 48
    1edc:	21 f4       	brne	.+8      	; 0x1ee6 <main+0x13c>
			access = KEYPAD_GetPressedKey();
    1ede:	0e 94 a3 05 	call	0xb46	; 0xb46 <KEYPAD_GetPressedKey>
    1ee2:	80 93 b2 00 	sts	0x00B2, r24
		}
		//SPI_sendByte(KEYPAD_GetPressedKey());
		if(access == '1'){
    1ee6:	80 91 b2 00 	lds	r24, 0x00B2
    1eea:	81 33       	cpi	r24, 0x31	; 49
    1eec:	61 f4       	brne	.+24     	; 0x1f06 <main+0x15c>
			LCD_clearScreen();
    1eee:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <LCD_clearScreen>
			LCD_displayString("admin");
    1ef2:	81 e8       	ldi	r24, 0x81	; 129
    1ef4:	90 e0       	ldi	r25, 0x00	; 0
    1ef6:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_displayString>

			access = '3';
    1efa:	83 e3       	ldi	r24, 0x33	; 51
    1efc:	80 93 b2 00 	sts	0x00B2, r24
		    mode = '1';
    1f00:	81 e3       	ldi	r24, 0x31	; 49
    1f02:	80 93 b3 00 	sts	0x00B3, r24
		}
		if(access  == '2'){
    1f06:	80 91 b2 00 	lds	r24, 0x00B2
    1f0a:	82 33       	cpi	r24, 0x32	; 50
    1f0c:	61 f4       	brne	.+24     	; 0x1f26 <main+0x17c>
			LCD_clearScreen();
    1f0e:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <LCD_clearScreen>
			LCD_displayString("user");
    1f12:	87 e8       	ldi	r24, 0x87	; 135
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_displayString>
			access = '3';
    1f1a:	83 e3       	ldi	r24, 0x33	; 51
    1f1c:	80 93 b2 00 	sts	0x00B2, r24
			mode = '2';
    1f20:	82 e3       	ldi	r24, 0x32	; 50
    1f22:	80 93 b3 00 	sts	0x00B3, r24


	    while(1)
	    {

	    	char input= KEYPAD_GetPressedKey();
    1f26:	0e 94 a3 05 	call	0xb46	; 0xb46 <KEYPAD_GetPressedKey>
    1f2a:	8f 87       	std	Y+15, r24	; 0x0f
	    	if(mode == '1'){
    1f2c:	80 91 b3 00 	lds	r24, 0x00B3
    1f30:	81 33       	cpi	r24, 0x31	; 49
    1f32:	21 f4       	brne	.+8      	; 0x1f3c <main+0x192>

	    		SPI_sendByte(input);
    1f34:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f36:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <SPI_sendByte>
    1f3a:	f5 cf       	rjmp	.-22     	; 0x1f26 <main+0x17c>
	    	}
	    	else if(mode == '2'){
    1f3c:	80 91 b3 00 	lds	r24, 0x00B3
    1f40:	82 33       	cpi	r24, 0x32	; 50
    1f42:	89 f7       	brne	.-30     	; 0x1f26 <main+0x17c>
	    		if(input!='5' && input != '6'){
    1f44:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f46:	85 33       	cpi	r24, 0x35	; 53
    1f48:	39 f0       	breq	.+14     	; 0x1f58 <main+0x1ae>
    1f4a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f4c:	86 33       	cpi	r24, 0x36	; 54
    1f4e:	21 f0       	breq	.+8      	; 0x1f58 <main+0x1ae>
	    			SPI_sendByte(input);
    1f50:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f52:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <SPI_sendByte>
    1f56:	e7 cf       	rjmp	.-50     	; 0x1f26 <main+0x17c>
	    		}else{
	    			LCD_clearScreen();
    1f58:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <LCD_clearScreen>
	    			LCD_displayString("Access Denied");
    1f5c:	8c e8       	ldi	r24, 0x8C	; 140
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_displayString>
    1f64:	e0 cf       	rjmp	.-64     	; 0x1f26 <main+0x17c>

00001f66 <__prologue_saves__>:
    1f66:	2f 92       	push	r2
    1f68:	3f 92       	push	r3
    1f6a:	4f 92       	push	r4
    1f6c:	5f 92       	push	r5
    1f6e:	6f 92       	push	r6
    1f70:	7f 92       	push	r7
    1f72:	8f 92       	push	r8
    1f74:	9f 92       	push	r9
    1f76:	af 92       	push	r10
    1f78:	bf 92       	push	r11
    1f7a:	cf 92       	push	r12
    1f7c:	df 92       	push	r13
    1f7e:	ef 92       	push	r14
    1f80:	ff 92       	push	r15
    1f82:	0f 93       	push	r16
    1f84:	1f 93       	push	r17
    1f86:	cf 93       	push	r28
    1f88:	df 93       	push	r29
    1f8a:	cd b7       	in	r28, 0x3d	; 61
    1f8c:	de b7       	in	r29, 0x3e	; 62
    1f8e:	ca 1b       	sub	r28, r26
    1f90:	db 0b       	sbc	r29, r27
    1f92:	0f b6       	in	r0, 0x3f	; 63
    1f94:	f8 94       	cli
    1f96:	de bf       	out	0x3e, r29	; 62
    1f98:	0f be       	out	0x3f, r0	; 63
    1f9a:	cd bf       	out	0x3d, r28	; 61
    1f9c:	09 94       	ijmp

00001f9e <__epilogue_restores__>:
    1f9e:	2a 88       	ldd	r2, Y+18	; 0x12
    1fa0:	39 88       	ldd	r3, Y+17	; 0x11
    1fa2:	48 88       	ldd	r4, Y+16	; 0x10
    1fa4:	5f 84       	ldd	r5, Y+15	; 0x0f
    1fa6:	6e 84       	ldd	r6, Y+14	; 0x0e
    1fa8:	7d 84       	ldd	r7, Y+13	; 0x0d
    1faa:	8c 84       	ldd	r8, Y+12	; 0x0c
    1fac:	9b 84       	ldd	r9, Y+11	; 0x0b
    1fae:	aa 84       	ldd	r10, Y+10	; 0x0a
    1fb0:	b9 84       	ldd	r11, Y+9	; 0x09
    1fb2:	c8 84       	ldd	r12, Y+8	; 0x08
    1fb4:	df 80       	ldd	r13, Y+7	; 0x07
    1fb6:	ee 80       	ldd	r14, Y+6	; 0x06
    1fb8:	fd 80       	ldd	r15, Y+5	; 0x05
    1fba:	0c 81       	ldd	r16, Y+4	; 0x04
    1fbc:	1b 81       	ldd	r17, Y+3	; 0x03
    1fbe:	aa 81       	ldd	r26, Y+2	; 0x02
    1fc0:	b9 81       	ldd	r27, Y+1	; 0x01
    1fc2:	ce 0f       	add	r28, r30
    1fc4:	d1 1d       	adc	r29, r1
    1fc6:	0f b6       	in	r0, 0x3f	; 63
    1fc8:	f8 94       	cli
    1fca:	de bf       	out	0x3e, r29	; 62
    1fcc:	0f be       	out	0x3f, r0	; 63
    1fce:	cd bf       	out	0x3d, r28	; 61
    1fd0:	ed 01       	movw	r28, r26
    1fd2:	08 95       	ret

00001fd4 <_exit>:
    1fd4:	f8 94       	cli

00001fd6 <__stop_program>:
    1fd6:	ff cf       	rjmp	.-2      	; 0x1fd6 <__stop_program>
